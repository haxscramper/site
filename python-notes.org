#+property: header-args:python :results output :eval none

* Python language

** Typing

src_python{from typing  import * #  noqa ignore=F405} to import  typing and
make  =pyflakes=  shut   up  about  star  imports.  You   can,  of  course,
meticulously write ~List, Dict, Set, Optional~ in the result, but I find it
a bit annoying when it comes to dealing with /most basic data types/.

*** Basic typing types

- basic types :: ~str~, ~int~, ~bool~, ~float~
- containers :: ~List~, ~Dict~, ~Set~, ~Optional~ for the built-in
  types. Generic parameters are specified in square brackets ~List[int]~.
- Sum/Product types :: ~Tuple~, ~Union~, ~Any~ for representing different
  types in the output. For tuples of a variable size the ellipsis can be
  used ~tuple[int, ...]~
- 'meta' mapping types :: ~Mapping~, ~MutableMapping~, ~Sequence~,
  ~Iterable~ - for types that provide the necessary interface, but are not
  /exactly/ a ~Dict~ or a ~List~.
- user-defined types :: ~module.Type~ or simply ~Type~ if the type was
  imported using star import or defined in the same module.
  - *for cyclic types* you [[https://peps.python.org/pep-0484/#forward-references][can]] use the string name of the type, such as

    #+begin_src python
class Tree:
    def __init__(self, left: 'Tree', right: 'Tree'):
        self.left = left
        self.right = right
    #+end_src
- Generics :: ~Generic[T]~ and ~TypeVar~
- other :: ~Callable[[Arg1Type, Arg2Type], ReturnType]~
  - It is possible to declare the return type of a callable without
    specifying the call signature by substituting a literal ellipsis for
    the list of arguments in the type hint: ~Callable[..., ReturnType]~.

*** Writing a 'generic' code

#+begin_src python
from typing import *

Val = TypeVar("Val")
class UserDefinedGeneric(Generic[Val]):
    def method() -> Val:
        pass # implementation
#+end_src

~TypeVar~ can also be used to constrain  selection of types to a fixed list
such as ~TypeVar("Val",  str, int, SomeUserType)~ or some kind  of an upper
bound  via ~=bound~.  For example,  ~TypeVar("Val", int)~  can only  accept
types that are subtypes of ~int~.

** Debugging and avoiding bugs in the first place

*** Default field values

#+begin_src python
from typing import List
class Store:
    data: List[int] = []

first_store = Store()
second_store = Store()
first_store.data.append(12)
print(second_store.data)
#+end_src

#+RESULTS:
: [12]

* Python implementation details

Python C API

* Python libraries

** SQLAlchemy



** Pandas

*** Creating dataframes

#+caption: Create dataframe from a dictionary
#+begin_src python
import pandas as pd

# single key-value pairs
df = pd.DataFrame(
    {"key1": "value1", "key2": "value2"}.items(), columns=["key", "value"]
)
print(df)
#+end_src

#+RESULTS:
:     key   value
: 0  key1  value1
: 1  key2  value2

#+caption: Create dataframe from a CSV file
#+begin_src python
df = pd.read_csv("file.csv")
#+end_src

*** Filtering and modifying dataframes

*** Grouping dataframe data

- Convert  normalized  one-to-many   dataset  back  to  dataframe-of-lists:
  ~df.groupby("Key").agg(newname=("Value", lambda x: list(x)))~

  #+caption: Original table
  | "Key" | "Value" |
  |-------+---------|
  | A     |       1 |
  | A     |       2 |
  | B     |       5 |
  | B     |       5 |
  | B     |       4 |
  | C     |       6 |

  #+caption: New, rearranged dataframe
  | "Key" | "newname" |
  | A     | [1,2]     |
  | B     | [5,5,4]   |
  | C     | [6]       |

** =Matplotlib=

*** Create simple plot

A little more verbose plotting setup than usual, but has the same structure
for multiple subplots.

#+begin_src python
fig, ax = plt.subplots(figsize=(12, 12))
# plot something on the `ax`
fig.savefig("<output file>", dpi=300, bbox_inches="tight")
#+end_src

*** Create stacked bar plot

If you have a series of Y values and need to plot them in form of a stacked
bar you  can do  this using ~bar()~  plotting method. In  order to  get the
/stacked/ plot  you need  to add  values in  a cumulative  manner. Assuming
~value~ is a sequence  of Y values, ~xdata~ is an X values  bar plot can be
created like this:

#+caption: Stacked bar plot
#+begin_src python
import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots(figsize=(12, 12))

# Bar positions
xdata = [1, 2, 3, 4, 6]
ydata = [[1, 2, 3, 4, 0], [3, 4, 5, 6, 9]]

# Annotate each stacked bar in parallel
labels = ["first", "second"]
# Bar width calculation is absolute, use difference between X data points
# to compute the value automatically and then multiply by 0.7 to get bars
# that occupy 70% of the maximum allowed width.
width = np.min(np.diff(xdata)) * 0.7
# Compute cumulative sum to get bar plots stacked on top of each other
bottom = np.cumsum([np.zeros(len(ydata[0])).astype(int)] + ydata, axis=0)
for idx in range(len(ydata)):
    ax.bar(
        x=xdata,
        height=ydata[idx],
        bottom=bottom[idx],
        label=labels[idx],
        width=width,
        edgecolor="black",
    )

plt.savefig("/tmp/result.png")
#+end_src

#+RESULTS:

*** Using =matplotlib= with pandas

You can either supply series data to the various plotting functions or use
~.plot()~ method of the dataframe. Latter allows you to supply an optional
~ax=~ argument to re-use =matplotlib= subplot object.

* Python tooling
