#+title: Programming notes

Notes related to programming in general, not tied to a particular language.

* Simpler low-level code patterns

Avoid overly smart and  'compact' - I've seen this advice  many times and I
generally agree  with it,  but almost always  it leans  towards suggestions
about higher-level constructions, closer to the application's architecture.
These are  very important  since bad  practices on a  large scale  are much
harder  to deal  with. But  it  is also  important  to look  at the  *code*
patterns.

** Structured control flow

Prefer  to  structure  the  program  in  a  way  that  makes  less  use  of
unstructured  control  flow  constructs   -  ~break~,  ~continue~,  ~goto~,
multiple ~return~ statements, ~throw/raise~ for  control flow. It makes the
code harder to read.

In cases when the use of said language constructs will instead increase the
readability (e.g.  in decently nested  code that uses  the ~while-if-break~
pattern the  usage of multiple  flags will needlessly increase  the mutable
state of the code) try avoid "skewed" control flow handling:

#+caption: Implicitly relying on 'break' to change the control flow
#+begin_src cpp
if (CONDITION) {
    break;
}
IF_TRUE;
#+end_src

could be rewritten as

#+caption: More explicit this-or-that in the code
#+begin_src cpp
if (CONDITION) {
    break;
} else {
    IF_TRUE;
}
#+end_src

** Don't randomly switch brace styles

This is mostly  related to the C family of  languages, which allow omitting
curly braces around the body of the ~if~, ~for~, ~while~ and ~do~. Not only
this can lead to bugs it also creates and inconsistent-looking code. If you
don't want to  use braces you can  switch to one of the  few languages that
are indentation-based.

- Some modern languages have already considered supporting this feature but
  rejected it (Rust - [[https://github.com/rust-lang/rfcs/issues/1616][rejected]], Zig had this built-in, but decided to add a
  separate [[https://github.com/ziglang/zig/issues/35][check]] instead). There is an  [[https://www.imperialviolet.org/2014/02/22/applebug.html][article]] where this feature led to a
  bug.
- Someone might consider the [[http://cafe.elharo.com/programming/prefer-multiline-if/][requirement]] of  "one statement per line" to be
  overly strict, but maintainability-wise it  is better than weird drive to
  squeeze as much  code as possible one line, joining  ~if() { action(); }~
  then removing wrapping  curly braces because it saves  four characters on
  the line. One must to decide  whether they are playing an elaborate ASCII
  art puzzle or writing a code for humans to read and modify.

  NOTE:   Some  programming   environments  might   have  trouble   putting
  breakpoints on the one-line statements.
- Ambiguous ~else~ attachment, although if you have a code like this

  #+caption: Fist attachment variant
  #+begin_src  cpp
if (one)
    if (two)
        foo();
    else
        bar();
  #+end_src

  And wonder whether it might be parsed as this instead

  #+caption: Second else attachment variant
  #+begin_src cpp
if(one)
    if(two)
        foo();
else
    bar();
  #+end_src

  Your first reaction  (hopefully) would be to add curly  braces anyway. If
  you  want to  avoid braces  so badly  I suggest  looking for  a different
  language to code in.
- Linters have sophisticated rules  ([[https://eslint.org/docs/latest/rules/curly][eslint]]) for handling different styles.
  If you are  aiming for the maintainable and  as-simple-as-possible code I
  suggest  not  trading a  hypothetical  readability  improvement for  code
  consistency. You can  of course write a long-winded  guidelines that will
  cover all  possible cases  ... but  enforcing a  single handling  is much
  easier.
  - =clang-tidy= has ~readability-braces-around-statements~  check that can
    be enforced and applied automatically.
    - src_sh{clang-tidy -fix
      -checks="readability-braces-around-statements"} - on
      a single  file. Clang-tidy  requires a  correct translation  unit for
      processing  - which  means  build system  configuration  needs to  be
      present    (~-p    <dir>~    to    provide    directory    containing
      ~compile_options.json~) or supplied explicitly (~-- <options...>~)
    - src_sh{fd -e cpp -e hpp -e c -e h -x clang-tidy -fix
      -checks="readability-braces-around-statements" '{}'} to apply
      recursively on all ~hpp/h/cpp/c~ files in the directory.
      - =clang-tidy=  can't work  on  incomplete  or malformed  translation
        units compilation database  might be necessary. Supply  path to the
        ~compile_commands.json~ using ~-p~ switch (~-p="<path>"~)
        - To generate compilation  database for Qt projects  use "Build" ->
          "Generate compilation database".
        - To   generate  compilation   database  for   CMake  project   use
          ~-DCMAKE_EXPORT_COMPILE_COMMANDS=ON~ while compiling the project.
    - =clang-tidy= 'FIXIT' applications  don't generate perfectly formatted
      code -  you might want to  use src_sh{fd -e cpp  -e hpp -e c  -e h -x
      clang-format  -i  '{}'} to  recursively  reformat  all files  in  the
      directory.
  - =clang-format= has ~InsertBraces~ option starting from v15

# TODO cite the apple  `if` patch bug, maybe there are  more cases that are
# less known
