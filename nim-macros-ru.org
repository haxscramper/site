<введение>

# * Кратное введение в работу компилятора

# Макросы по своей сути сильно связаны с процессом работы компилятора, так
# что для простоты понимания принципов их работы желательно иметь как минимум
# поверхностное представление о том что у компилятора "внутри", хотя это и не
# является строго обязательным.

Относительно терминологии - для избежания путаницы с тем что такое
"оператор", "команда", "инструкция" и "выражение" - так как однозначно
устоявшегося перевода нет то я счел необходимым привести уточнение
(например в википедии сказано что "Инструкция или оператор (англ.
statement) — наименьшая автономная часть языка программирования; команда
..."), а в нижеприведенном тексте это все может использоваться одновременно
и иметь значения которые не являются взаимозаменяемыми.

- оператор "operator" :: инфиксный или префиксный - ~a + b~, ~not e~, ~12 mod 18~
- команда "command" :: один из вариантов синтаксиса вызова процедуры - ~echo "test"~
- инструкция "statement" :: тип синтаксиса языка, ~for~, ~while~
- выражение "expression" :: еще один тип синтаксиса

И оператор и команда могут быть как выражением так и инструкцией в
зависимости от контекста. Например

#+begin_src nim :exports both
proc `not`(arg: string) = discard

not "test" # префиксный оператор `not` используется как инструкция
echo (not false) # Префиксный оператор используется как выражения-аргумент
                 # для процедуры `echo`, которая в свою очередь уже
                 # является инструкцией.
#+end_src

#+RESULTS:
: true

* Макросы, использование

Основное предназначение макросов - создание DSL или автоматизация рутинного
кода.

** Аргументы макроса

Аргументы макроса могут иметь один из трех видов - ~typed~, ~untyped~ и
~static[T]~ где ~T~ это какой-то тип, например ~int~ или ~string~.

*** ~untyped~

Если аргумент имеет тип ~untyped~ то макрос вызывается *до* семантической
проверки кода и принимает на вход синтаксическое дерево как оно написано в
коде.

На данный момент нетипизированное синтаксическое дерево является частью
стабильного API. С тем как оно выглядит для основных конструкций языка
можно ознакомится в [[https://nim-lang.org/docs/macros.html][документации]].

#+begin_src nim :exports both
macro withUntyped(arg: untyped) = echo lispRepr(arg)

withUntyped(12 + 2)
withUntyped(echo(12, 32))
#+end_src

#+RESULTS:
: (Infix (Ident "+") (IntLit 12) (IntLit 2))
: (Call (Ident "echo") (IntLit 12) (IntLit 32))

Если нужно посмотреть как выглядит какой-то определенный кусок кода то
можно воспользоваться макросами [[https://nim-lang.org/docs/macros.html#dumpTree.m%2Cuntyped][dumpTree]] или [[https://nim-lang.org/docs/macros.html#dumpLisp.m%2Cuntyped][dumpLisp]].

#+begin_src nim :exports both
dumpTree:
  for i in 0 .. 12:
    echo i
#+end_src

#+RESULTS:
#+begin_example
StmtList
  ForStmt
    Ident "i"
    Infix
      Ident ".."
      IntLit 0
      IntLit 12
    StmtList
      Command
        Ident "echo"
        Ident "i"
#+end_example

*** ~typed~

В случае аргументов типа ~typed~ макрос вызывается *после* семантической
проверки и принимает преобразованное синтаксическое дерево.

На данный момент структура типизированного синтаксического дерева не
является частью стабильного API. Технически это деталь реализации
компилятора - это не означает что это что-то открыто
нестабильное/экспериментальное - просто никаких официальных гарантий по
структуре нет, хотя изменения происходят крайне редко.

#+begin_src nim :exports both
macro withTyped(arg: typed) = echo lispRepr(arg)

withTyped(12 + 2)
withTyped(echo(12, 32))
#+end_src

#+RESULTS:
: (IntLit 14)
: (Call (Sym "echo") (HiddenStdConv (Empty) (Bracket (StrLit "12") (StrLit "32"))))

В этом примере уже можно видеть что были произведены дополнительные
преобразования в коде - ~12 + 2~ было превращено в ~12~ за счет [[https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BA%D0%B0_%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82][свертки
констант]]. Аналогичное преобразование было произведено для аргументов
~echo~, но в данном случае для оператора ~$~. Также был добавлены
квадратные скобки (~Bracket~) для всех аргументов, так как ~echo~ это
процедура с ~varargs~ аргументами.

В случае в ~untyped~ также можно писать какой-то конкретный тип, для того
чтобы создавать перегруженные макросы. Однако сам тип аргумента внутри
макроса все равно будет ~NimNode~

#+begin_src nim :exports both
macro overloaded(arg: int) = echo "called int: ", lispRepr(arg), " type: ", typeof(arg)
macro overloaded(arg: string) = echo "called string: ", lispRepr(arg), " type: ", typeof(arg)

overloaded(12)
overloaded("string")
#+end_src

#+RESULTS:
: called int: (IntLit 12) type: NimNode
: called string: (StrLit "string") type: NimNode


*** ~static[T]~

~static~ позволяет передавать в макросы /значение/ а не синтаксическое
дерево - т.е. тип аргумент будет /вычислен/ и передан в макрос как
значение, а не /скомпилирован/ и передан как дерево.

#+begin_src nim :exports both
macro withStatic(arg: static[(int, int)]) =
  echo "static: ", typeof(arg), " ", repr(arg)

macro withTypes(arg: (int, int)) =
  echo "types: ", typeof(arg), " ", repr(arg)

func returnsTuple(): (int, int) = (123, 3)

withStatic(returnsTuple())
withTypes(returnsTuple())
#+end_src

#+RESULTS:
: static: (int, int) (123, 3)
: types: NimNode returnsTuple()

** Порядок раскрытия макросов и выполнения кода на этапе компиляции.

Во время обработки программы компилятор анализирует исходный код в порядке
его написания, начиная с самой первой инструкции, пошагово. Последнее
значит, что прежде чем приступить к обработке следующей инструкции первого
уровня компилятор полностью должен закончить работу с предыдущей. Это нужно
для того чтобы макросы могли генерировать процедуры, которые используются в
дальнейшем коде (в том числе и других макросах).

Каждая инструкция рекурсивно раскрывается (и в случае ~static:~
выполняется) пока в полученном дереве не будет ни одного вызова макроса.

** Использование в коде

Макросы могут быть использованы в нескольких вариантах, включая обычные
вызовы (~call(arg)~ или ~call arg~).

Макрос также можно использовать в качестве [[https://nim-lang.org/docs/manual.html#pragmas][прагмы]] на определениях типов,
функций и процедур.

# Мне казалось что каким-то магическим образом можно также использовать на
# определении переменных, но так как `let variable {.userPragma.} = 12`
# выдает ошибку неопределенном идентификаторе ~variable~ с тех пор что-то
# изменилось.

Макрос, использующийся на определении процедуры имеет один аргумент, и
может ничего не возвращать - также как и любой другой макрос который
используется для инструкций.

#+begin_src nim :exports both
macro userPragma(arg: untyped): untyped =
  echo treeRepr(arg)

proc definition(arg: int): float {.userPragma.} = discard
#+end_src

#+RESULTS:
#+begin_example
ProcDef
  Ident "definition"
  Empty
  Empty
  FormalParams
    Ident "float"
    IdentDefs
      Ident "arg"
      Ident "int"
      Empty
  Empty
  Empty
  StmtList
    DiscardStmt
      Empty
#+end_example

Макрос, использующийся на типе должен возвращать какое-то определение типа
которое будет потом вставлено обратно в блок ~type~, в противном случае
произойдет ошибка.
# каким образом это до сих пор не починили я не знаю, мне кажется там висит
# где-то репорт от 2017 года где про это говорится.

#+begin_src nim :exports both
import std/macros

macro user(a: untyped): untyped = echo treeRepr(a)

type SSS {.user.} = object
#+end_src

#+RESULTS:
#+begin_example
TypeDef
  PragmaExpr
    Ident "SSS"
    Pragma
  Empty
  ObjectTy
    Empty
    Empty
    Empty

nim_src_iEh4kh.nim(8, 12) Error: illformed AST:
#+end_example

Для переменных у макроса должно быть три аргумента которые принимают имя
переменной, ее тип и выражение для инициализации. Как последние два
опциональны и могут иметь значение ~nil~.

#+begin_src nim :exports both
macro forLet(varName, varType, varExpr: untyped): untyped =
  echo "name: ", repr(varName)
  echo "type: ", repr(varType)
  echo "expr: ", repr(varExpr)

let test {.forLet.}: int = 12
#+end_src

#+RESULTS:
: name: test
: type: int
: expr: 12

* Нетипизированные макросы

Нетипизированные макросы в основном используются для реализации DSL, так
как они позволяют пользователю писать любое синтаксическое дерево которое
парсер может обработать.

* Типизированные макросы

Есть несколько различных причин по которым вам может потребоваться
использование типизированного макроса - самой частой является доступ к
дополнительной информации, которая просто недоступна для нетипизированного
случая. Второй причиной часто является тот факт что только типизированные
макросы обеспечивают корректную композицию, так как прежде чем код туда
попадает он еще раз проходит компиляцию.

Основное отличие типизированных макросов от нетипизированных заключается в
том, на каком этапе компиляции они выполняются. Типизированные макросы
выполняются после семантической проверки и принимают на вход AST в которое:

1. все вызовы макросов или шаблонов внутри уже раскрыты, ~f(g(x))~ -
   аргументом ~f~ будет являться /скомпилированный результат/ выполнения
   ~g(x)~, а не /вызов/ самой функции, как это было в случае с
   нетипизированными макросами.

   Т.е. в случае с ~f(g(x))~ сначала будет выполнен ~g(x)~, после чего
   результат его работы будет скомпилирован, и передан как аргумент ~f~
2. Идентификаторы в большинстве своем переведены в символы и дерево
   содержит ~nnkSym~ элементы вместо ~nnkIdent~.
3. может содержать дополнительные элементы, такие как ~nnkOpenSymChoice~,
   ~nnkClosedSymChoice~, и т.д.
4. может содержать свернутые константные выражения - например ~$(12 + 12)~
   может быть переведено в ~"24"~.

** Структура типизированного синтаксического дерева

*** Символы и ноды символов

Изначально синтаксическое дерево содержит идентификаторы, написанные
пользователем - ~echo~, ~items~ и т.д. После выполнения семантического
анализа они конвертируются в конкретные символы которые служат для привязки
как каким-то элементам, объявленным в коде - процедурой, типом, модулем и
т.д.

Ноды с типами ~nnkSym~, ~nnkOpenSymChoice~ и ~nnkClosedSymChoice~
Используются для работы с символами - как полностью разрешенными так и
частичными. В первом случае (полностью разрешенный) символ напрямую связан
с каким-то элементом в коде, во втором случае нода описывает /выборку/ из
нескольких вариантов, которая либо будет разрешена в какой-то один элемент,
либо так и останется набором вариантов.

#+begin_src nim :exports both
macro ex(a: typed) = echo lispRepr(a)

ex(`+`)

proc gen[T](a, b: T) =
  ex(`+`)
  ex(a + b)

gen(12, 3)
#+end_src

#+RESULTS:
: (ClosedSymChoice 20 "+")
: (OpenSymChoice 20 "+")
: (Infix (Sym "+") (Sym "a") (Sym "b"))

Например в данном случае идентификатор ~+~ не может быть разрешен в
конкретный символ так как у него нет аргументов - это может быть ~int +
int~, ~float + float~ или один из двадцати других перегрузок этого
оператора (количество доступных перегрузок показано как ~20~). Доступ ко
всем символам можно получить через оператор ~[]~ или в цикле ~for overload
in items(a): ...~.

В том случае если идентификатор может быть однозначно разрешен в символ
(т.е. это не перегруженная процедура, функция и т.д.) то конвертация будет
проведена.

Тип ноды на второй строке также предназначен для обозначения выборки, но
так как вызов ~ex~ поставлен внутри generic процедуры то в зависимости от
того где она будет вызвана могут учитываться все операторы ~+~ которые были
объявлены позже.

На последней строке оператор был разрешен в конкретный символ так как
аргументы обоих типов уже известны.

После получения конкретной ноды символа можно узнать его тип (kind) и
реализацию через ~symKind()~ и ~getImpl()~ соответственно.

#+begin_src nim
macro getImpl(a: typed) =
  echo "type: ", symKind(a)
  echo a.getImpl().treeRepr()

proc singleOverload() = echo 12

getImpl(singleOverload)

type SingleImpl = object

getImpl(SingleImpl)
#+end_src

#+RESULTS:
#+begin_example
type: nskProc
ProcDef
  Sym "singleOverload"
  Empty
  Empty
  FormalParams
    Empty
  Empty
  Empty
  Command
    Sym "echo"
    HiddenStdConv
      Empty
      Bracket
        StrLit "12"
type: nskType
TypeDef
  Sym "SingleImpl"
  Empty
  ObjectTy
    Empty
    Empty
    Empty
#+end_example

#+begin_src nim :exports both
macro getImpl(a: typed) =
  echo a.getTypeImpl().treeRepr()
  echo a.getImpl().treeRepr()
  echo a.getTypeImpl()[1].getTypeImpl().treeRepr()

macro user(a: untyped): untyped = a

type
  Transformed {.user.} = object
    field1: int
    field2: float

getImpl(Transformed)
#+end_src

#+RESULTS:
#+begin_example
BracketExpr
  Sym "typeDesc"
  Sym "Transformed"
TypeDef
  PragmaExpr
    Sym "Transformed"
    Pragma
  Empty
  ObjectTy
    Empty
    Empty
    RecList
      IdentDefs
        Ident "field1"
        Sym "int"
        Empty
      IdentDefs
        Ident "field2"
        Sym "float"
        Empty
ObjectTy
  Empty
  Empty
  RecList
    IdentDefs
      Sym "field1"
      Sym "int"
      Empty
    IdentDefs
      Sym "field2"
      Sym "float"
      Empty
#+end_example

*** ~nnkHidden*~ ноды

#+begin_src nim :exports both
macro show(idx: static[int], a: typed) =
  echo "-------------------- ", idx, " --------------------"
  echo a.treeRepr()

show 1:
  var f: float = 1

proc withVarArg(a: var int) = discard

var value = 12
show 2:
  withVarArg(value)

type Derived = ref object of RootObj
proc takesBase(base: ref RootObj) = discard

show 3:
  takesBase(Derived())

show 4:
  echo 12, 3

converter toDerived(a: int): Derived = discard
proc takesDerived(d: Derived) = discard

show 5:
  takesDerived(123)

#+end_src

#+RESULTS:
#+begin_example
-------------------- 1 --------------------
StmtList
  VarSection
    IdentDefs
      Sym "f"
      Sym "float"
      HiddenStdConv
        Empty
        IntLit 1
-------------------- 2 --------------------
StmtList
  Call
    Sym "withVarArg"
    HiddenAddr
      Sym "value"
-------------------- 3 --------------------
StmtList
  Call
    Sym "takesBase"
    HiddenSubConv
      Empty
      ObjConstr
        Sym "Derived"
-------------------- 4 --------------------
StmtList
  Command
    Sym "echo"
    HiddenStdConv
      Empty
      Bracket
        StrLit "12"
        StrLit "3"
-------------------- 5 --------------------
StmtList
  Call
    Sym "takesDerived"
    HiddenCallConv
      Sym "toDerived"
      IntLit 123

nim_src_II5cqK.nim(34, 24) Error: type mismatch: got <typedesc[ref int]>
but expected one of:
proc `[]`(n: NimNode; i: BackwardsIndex): NimNode
  first type mismatch at position: 0
proc `[]`(n: NimNode; i: int): NimNode
  first type mismatch at position: 0
proc `[]`(s: string; i: BackwardsIndex): char
  first type mismatch at position: 0
proc `[]`(s: var string; i: BackwardsIndex): var char
  first type mismatch at position: 0
proc `[]`[I: Ordinal; T](a: T; i: I): T
  first type mismatch at position: 0
proc `[]`[Idx, T; U, V: Ordinal](a: array[Idx, T]; x: HSlice[U, V]): seq[T]
  first type mismatch at position: 0
proc `[]`[Idx, T](a: array[Idx, T]; i: BackwardsIndex): T
  first type mismatch at position: 0
proc `[]`[Idx, T](a: var array[Idx, T]; i: BackwardsIndex): var T
  first type mismatch at position: 0
proc `[]`[T, U: Ordinal](n: NimNode; x: HSlice[T, U]): seq[NimNode]
  first type mismatch at position: 0
proc `[]`[T, U: Ordinal](s: string; x: HSlice[T, U]): string
  first type mismatch at position: 0
proc `[]`[T; U, V: Ordinal](s: openArray[T]; x: HSlice[U, V]): seq[T]
  first type mismatch at position: 0
proc `[]`[T](s: openArray[T]; i: BackwardsIndex): T
  first type mismatch at position: 0
proc `[]`[T](s: var openArray[T]; i: BackwardsIndex): var T
  first type mismatch at position: 0
template `[]`(s: string; i: int): char
  first type mismatch at position: 0

expression: `[]`(ref int)
#+end_example

** Работа с типизированным синтаксическим деревом

*** Получение информации из символов

*** Трансформация типизированного дерева

*** Работа с типами

# *** ~std/typetraits~

# Этот модуль предоставляет несколько дополнительных процедур для работы с
# типами как в макросах, так и в обычном пользовательском коде. Например,
