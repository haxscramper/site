#+TITLE: Nim notes
#+property: header-args :results verbatim


* Questions that I've seen asked very frequently

** Conversions between basic data types

*** Using built-in type conversion or ~strutils~ parsing

Most basic data types can be converted into each other using built-in type
conversion, or via call to ~parseX()~ procedures defined in the
~std/strutils~ module.

| from/to   | ~string~ | ~char~         | ~int~          | ~float~          | ~cstring~     |
| ~string~  |          | ~str[<index>]~ | ~parseInt(<>)~ | ~parseFloat(<>)~ | ~cstring(<>)~ |
| ~char~    | ~$<>~    |                | ~int(<>)~      |                  |               |
| ~int~     | ~$<>~    | ~char(<>)~     |                | ~float(<>)~      |               |
| ~float~   | ~$<>~    |                | ~int(<>)~      |                  |               |
| ~cstring~ | ~$<>~    |                |                |                  |               |

*** Generic type conversions

Basic built-in generic types can also be converted into each other using
built-in operators.

**** Operator ~@~ for conversion to sequences

#+begin_src nim
let arr = [1, 2, 3]
echo typeof arr
echo arr
let sequence = @arr
echo typeof sequence
echo sequence
#+end_src

#+RESULTS:
: array[0..2, int]
: [1, 2, 3]
: seq[int]
: @[1, 2, 3]

Note that ~@[1, 2, 3]~ used for construction of sequence literals is
actually an application of prefix ~@~ to the ~[]~ argument.

This operator can also be used for construction of the ~seq[(A, B)]~ from
array-of-tuples literals.

#+begin_src nim
let arr = { 1: 2, 3, 4: 5}
echo typeof arr
echo arr
let sequence = @arr
echo typeof sequence
echo sequence
#+end_src

#+RESULTS:
: array[0..2, (int, int)]
: [(1, 2), (3, 5), (4, 5)]
: seq[(int, int)]
: @[(1, 2), (3, 5), (4, 5)]

* General interop

** ~cstring~ aka "compatible" string

Type name  ~cstring~ actually stands  for the "compatible" string,  for the
reasons  that  are completely  beyond  my  comprehension.  Anyway -  it  is
/supposed/ to  be a 'universal' type  for interop with both  JavaScript and
C/C++ backends - mapping the C's ~char*~  and JS's string types to the same
nim type.  This section covers  interaction between ~cstring~  and compiled
backends - for JavaScript interop you need to look elsewhere.

- [ ] Allocation of the ~cstring~
- [ ] ~cstring~ lifetime
- [ ] Implicit conversion to the ~cstring~

* C++ interop

** Wrapping C++ type without default constructor

#+begin_src c++
class NoDefault {
    public:
        NoDefault(int arg) {}
};
#+end_src

#+begin_src nim :cmdline --backend=cpp --cc=gcc
type
  NoDefault {.importcpp: "NoDefault".} = object

proc initNoDefault(arg: cint): NoDefault {.constructor, importcpp: "NoDefault(@)".}
#+end_src

#+RESULTS:

** Compiling nim to shared library and calling it from C++

#+begin_src nim
proc exportedProc() {.exportc, dynlib.} =
  echo "test"
#+end_src

#+begin_src c++
extern "C" void exportedProc();

int main () {
    exportedProc();
}
#+end_src

#+begin_src bash
nim cpp --app:lib file.nim
g++ -L. -lfile main.cpp
LD_LIBRARY_PATH=(pwd)
./a.out
#+end_src

* Compiler implementation

** Issues

- ~PNode~ type is used everywhere,  including the parser, semantic analysis
  and embedded  VM. This means each  part of the compiler  cannot work with
  the best data structure for the task  and instead forced into to fit into
  the ~PNode~.

  This is not a  "god object" antipattern per se, but in my  book it is not
  that much different.

- Error message formatting is done  via ad-hoc mix of [[https://github.com/nim-lang/Nim/blob/0f555110e6dc54b5564c1c8e5c77b67631588f59/compiler/lineinfos.nim#L119][enumeration]], [[https://github.com/nim-lang/Nim/blob/0f555110e6dc54b5564c1c8e5c77b67631588f59/compiler/ccgexprs.nim#L2459][in-place
  formatting]], repeated string [[https://github.com/nim-lang/Nim/blob/0f555110e6dc54b5564c1c8e5c77b67631588f59/compiler/sigmatch.nim#L2638][copy]]-[[https://github.com/nim-lang/Nim/blob/0f555110e6dc54b5564c1c8e5c77b67631588f59/compiler/sigmatch.nim#L2647][pastes]], random ~const~ string [[https://github.com/nim-lang/Nim/blob/0f555110e6dc54b5564c1c8e5c77b67631588f59/compiler/commands.nim#L116][templates]].
  There are hundred of different diagnostics compiler might produce, but in
  order to figure  out where something might be formatted  your best bet is
  to just ~rg~ over the whole code and edit a random string.
- Endless sea  of magical  indices for subnode  access operation  - ~n[0]~,
  ~n[1]~ and so on. It is almost impossible to know what is going on in the
  code unless you have good understanding of all the inputs of a particular
  function, which is, in a lot of situations, rather hard to achieve.

  #+begin_src sh
Nim/compiler on  devel via 👑 v1.6.0
❯ rg -g "*.nim" '\[\d+\]' | wc -l
4536
  #+end_src
- ~sizeof(lexer.Token)~ -> 72
