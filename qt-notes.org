#+title: Qt, QML, QtCreator, =qmake= notes

* Qt creator & designer

** Use derived widget class in designer interface

- Create new widget cass using wizard menu (or manually). Remember
  name of the header file (relative path to the project root)
- In designed menu right-click on widget in central pane and select
  ='Promote to'=
- In new opened window you should see ='New Promoted Class'=. Fill it
  in:
  - Header file :: header file of your previously created class
  - Promoted class name ::  name of your promoted class
  - Base class name :: (should be already filled it) - Base class of
       your derived class
- Press ='Add'=, select widget in ='Promoted Classes'= and click
  ='Promote'=

** Selecting terminal application for 'run in console'

=Tools > Options > Environment > System=. If you want to use kitty set
=Terminal:= field to ~/bin/kitty~, second field set as ~-e~.

** Running python script

https://stackoverflow.com/questions/24100602/developing-python-applications-in-qt-creator

** ~qDebug~ / ~console.log~ does not output anything in =QtCreator=

Add ~QT_ASSUME_STDERR_HAS_CONSOLE~ environment variable in the 'run'
configurations and set it's value to ~1~. IME most of the time an issue
comes from lack of this configuration, even though most of the forum posts
start with the second one (presented below).

Alternatively this might be caused by the logging rules configuration. In
this case you can either run with
~QT_LOGGING_RULES="*.debug=true;qt.*=false"~ environment variable set or
modify the ~qtlogging.ini~ file in the ~$XDG_CONFIG_HOME/QtProject~ path to
contain this content.

#+begin_src conf
[Rules]
*.debug=true
qt.*.debug=false
#+end_src

The same configuration setup also applies to the =qml= console logging,
although ~qt.*.debug~ can also be used to filter redundant noise stream
generated by a regular =qml= applications.

* Metaobject system

- ~Q_GADGET~ for simpler data types that need to be exposed to the =qml=
  layer. This macro still makes it possible to use the ~Q_INVOKABLE~,
  ~Q_PROPERTY~ and ~Q_ENUM~ macros, which is enough *for value objects*.
  - MAYBE Alternatively you can use a ~QObject~-derived class and pass it
    as ~qmlRegisterUncreatableType~ in the QML.
- ~Q_INVOKABLE~ - don't forget to add ~Q_OBJECT~

* QML

** Errors

- ~Unable to assign TYPE to TYPE*~ ::
- ~TypeError: Cannot read property 'FIELD' of null~ ::
- ~Unknown method return type: TYPE~ :: Add ~qRegisterMetaType<TYPE>();~
- ~cannot find the NOTIFY signal <signal name> in class TYPE for property 'FIELD'~ :: Either
  define ~signal:~ or remove ~NOTIFY <field>Changed~ from the ~Q_PROPERTY~
  call.
