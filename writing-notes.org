#+title: Writing notes

#+name: nlp_parse
#+caption: Example NLP parser
#+begin_src python :results output :exports result :var sent="Random"
from  nltk.parse.corenlp import CoreNLPParser

parser = CoreNLPParser()
parse = next(parser.raw_parse(sent))
parse.pretty_print()
#+end_src

#+name: sexp_parse
#+caption: Example NLP parser
#+begin_src python :results output :exports result :var sent="Random"
from nltk.parse.corenlp import CoreNLPParser
import nltk

parser = CoreNLPParser()
parse = next(parser.raw_parse(sent))


def rec(tree: nltk.tree.Tree, level: int) -> str:
    if len(tree) == 1 and type(tree[0]) != nltk.tree.Tree:
        return f"{'  ' * level}({tree.label()} \"{tree[0]}\")"

    else:
        result = f"{'  ' * level}({tree.label()}"
        for sub in tree:
            result += "\n"
            result += rec(sub, level + 1)


        result += ")"
        return result

print(rec(parse, 0))
#+end_src

* links

- Find words and phrases in different contexts
  - [[https://ludwig.guru/][ludwig.guru]] "Ludwig is the first sentence search engine that helps you
    write better English by giving you contextualized examples taken from
    reliable sources."
  - [[https://lengusa.com/][lengusa | Write better English!]]
  - [[https://www.wordhippo.com/][Thesaurus and Word Tools | WordHippo]]
  - [[https://skell.sketchengine.eu/#home?lang=en][SKELL]]
  - [[https://writebetter.io/][WriteBetter &#8211; A linguistic search engine]]
- NLP processing
  - [[https://corenlp.run/][CoreNLP]]
  - [[https://emorynlp.github.io/ddr/doc/pages/overview.html][Deep dependencies guidelines]]
  - [[https://gist.github.com/nlothian/9240750][Penn Treebank II Tags · GitHub]]
- Dictionaries
  - Find a word by it's description
    - [[https://reversedictionary.org/][Reverse Dictionary]] This reverse dictionary allows you to search for words
      by their definition. Check out RelatedWords.org to get words related to a
      single word.
    - [[https://www.onelook.com/thesaurus/][OneLook Thesaurus and Reverse Dictionary]] Enter a word, phrase,
      description, or pattern above to find synonyms, related words, and much
      more.
  - Direct
    - [[https://www.wordreference.com/][English to French, Italian, German &amp; Spanish Dictionary -
      WordReference.com]]
    - [[https://en.wiktionary.org/wiki/Wiktionary:Main_Page][Wiktionary, the free dictionary]]
    - [[https://dictionary.reverso.net/english-cobuild/][English dictionary | Learn English | Reverso]] get a simple definition
      of a word.
    - [[https://www.merriam-webster.com/][Dictionary by Merriam-Webster: America's most-trusted online
      dictionary]]
  - [[http://download.huzheng.org/dict.org/][dictd-www.dict.org Dictionaries]] download  openly available dictionaries
    for use  with =StarDict=  software. For  use on  linux --  download the
    dictionary file,  unpack it  using src_sh{tar -xvf  <name>.tar.bz2} and
    then move resulting files from the directory (~<name>~ by default) into
    ~$HOME/.stardict/dic~
    - Note that "The Collaborative  International Dictionary of English" is
      largely  an extension  of  "Webster's  Revised Unabridged  Dictionary
      (1913)" and ideally  only one is needed (I'm  using the international
      version).
    - Also note  that Webster dictionary presented  in this list is  a 1913
      version  and is  notably different  from the  online version  and IMO
      better (for more elaborate explanation see [[http://jsomers.net/blog/dictionary][You're probably using the
      wrong dictionary]])
    - To get the synonyms in results you can use "Moby Thesaurus II"
    - CLI tool  for accessing  the dictionary  data is  ~sdcv~ and  the GUI
      variant  is available  as ~qstardict~  (Qt  rewrite) on  =aur= or  as
      ~startdict~. There  seems to  be no drastic  difference feature-wise,
      although the latter one worked more consistently for me. Both are run
      as daemons and can provide a real-time lookup of different words that
      you select in other applications.
    - ~sdcv~ can be used from emacs using homonymous package ~sdcv~
- Translation
  - [[https://context.reverso.net/translation/][Reverso Context | Translation in context]]
  - [[https://tr-ex.me/][Online dictionary]] "Tr-ex.me is bilingual contextual dictionary,
    containing translations of various phrases. For each translation, we
    have examples of using in various sentences. The examples are taken
    from millions of texts previously translated ranging from
    dialogues(subtitles of film), and official documents to multilingual
    websites."
  - [[https://www.multitran.com/][Multitran dictionary]]
  - [[https://glosbe.com/][Glosbe Dictionary - All Languages of the World in One Place]]
  - [[https://www.linguee.com/][Linguee | Dictionary for German, French, Spanish, and more]]
- Other
  - [[https://textranch.com/][Online editing with great prices, great service, great quality! |TextRanch]]
  - [[https://www.scribbr.com/knowledge-base/][Scribbr Knowledge Base | Free Resources to Help You Graduate]]
  - [[http://www.plainenglish.co.uk/how-to-write-in-plain-english.html][How to write in plain English]]
  - [[https://spacy.io/api][Spacy Library Architecture]]
  - [[https://developers.google.com/style][Google developer documentation style guide]]
  - ~Microsoft_Manual_of_Style_for_Technical_Publications,_3rd_edition~
  - ~The Chicago Manual of Style (coll.)~
  - [[https://painintheenglish.com/forum][Discussion Forum — Pain in the English]]

    =Adblock= rules for their shitty popups:

    #+begin_example
||painintheenglish.com/img/proofreader-popup.png$image
||painintheenglish.com/img/proofreader-bubble.png$image
painintheenglish.com###fixedHeader > .blurbGroup
painintheenglish.com###popBottom
    #+end_example
  - [[https://www.goodreads.com/quotes][Popular Quotes]]  - copy-pasting quotes into  the writing might be  a bad
    taste,  but  it  can't  hurt  to read  some  interesting  passages  and
    reinterpret as needed.
- Articles
  - [[https://en.wikipedia.org/wiki/Valency_(linguistics)][Valency (linguistics)]], [[https://www.thoughtco.com/valency-grammar-1692484][Linguistic Valency in English Grammar]]


* nltk

** Word level POS tags

- Noun (names)  :: a word or  lexical item denoting any  abstract (abstract
  noun: e.g. home) or concrete entity (concrete noun: e.g. house); a person
  (police  officer, Michael),  place (coastline,  London), thing  (necktie,
  television), idea  (happiness), or quality  (bravery). Nouns can  also be
  classified as count  nouns or non-count nouns; some can  belong to either
  category. The most common part of speech; they are called naming words.
  - ~NN~ :: /[N]ou[N]/ *noun, common, singular or mass*
    #+begin_quote
    common-carrier  cabbage knuckle-duster  Casino  afghan shed  thermostat
    investment slide  humour falloff slick wind  hyena override subhumanity
    machinist ...
    #+end_quote

  - ~NNP~ :: /[N]ou[N] [P]roper/ *noun, proper, singular*
    #+begin_quote
    Motown  Venneboerger  Czestochwa  Ranzer  Conchita  Trumplane  Christos
    Oceanside Escobar Kreisler  Sawyer Cougar Yvette Ervin  ODI Darryl CTCA
    Shannon A.K.C. Meltex Liverpool ...
    #+end_quote

  - ~NNPS~ :: /[N]ou[n] [P]roper + [S]/ *noun, proper, plural*
    #+begin_quote
    Americans Americas Amharas  Amityvilles Amusements Anarcho-Syndicalists
    Andalusians  Andes Andruses  Angels Animals  Anthony Antilles  Antiques
    Apache Apaches Apocrypha ...
    #+end_quote

  - ~NNS~  :: /[N]ou[n] + [S]/  *noun, common, plural*
    #+begin_quote
    undergraduates scotches  bric-a-brac products bodyguards  facets coasts
    divestitures    storehouses   designs    clubs   fragrances    averages
    subjectivists apprehensions muses factory-jobs ...
    #+end_quote

- Pronoun (replaces  or places again)  :: a substitute  for a noun  or noun
  phrase (them, he). Pronouns make sentences shorter and clearer since they
  replace nouns.
  - ~PRP~ :: *pronoun, personal*
    #+begin_quote
    hers herself him  himself hisself it itself me myself  one oneself ours
    ourselves ownself self she thee theirs them themselves they thou thy us
    #+end_quote

  - ~PRP$~ :: *pronoun, possessive* her his mine my our ours their thy your
  - ~WP~  ::  *WH-pronoun*
    #+begin_quote
    that what whatever whatsoever which who whom whosoever
    #+end_quote

  - ~WP$~ :: *WH-pronoun, possessive*
    #+begin_quote
    whose
    #+end_quote

- Adjective (describes,  limits) :: a modifier  of a noun or  pronoun (big,
  brave). Adjectives make the meaning of another word (noun) more precise.
  - ~JJ~  :: /Ad[J]ective/ *adjective  or  numeral, ordinal*
    #+begin_quote
    third ill-mannered pre-war regrettable oiled calamitous first separable
    ectoplasmic  battery-powered   participatory  fourth  still-to-be-named
    multilingual multi-disciplinary
    #+end_quote

  - ~JJR~  :: /Ad[J]ective + [R]elative/ *adjective, comparative*
    #+begin_quote
    bleaker braver breezier briefer  brighter brisker broader bumper busier
    calmer cheaper choosier cleaner clearer closer colder commoner costlier
    cozier creamier crunchier cuter ...
    #+end_quote

  - ~JJS~  :: /Ad[J]ective [S]uperlative/ *adjective, superlative*
    #+begin_quote
    calmest cheapest choicest classiest cleanest clearest closest commonest
    corniest costliest crassest creepiest  crudest cutest darkest deadliest
    dearest deepest densest dinkiest ...
    #+end_quote

- Verb  (states action  or  being) ::  a word  denoting  an action  (walk),
  occurrence (happen),  or state of being  (be). Without a verb  a group of
  words cannot be a clause or sentence.
  - ~VB~  :: /[V]er[B]/ *verb*,  *base form*
    #+begin_quote
    ask assemble assess assign assume  atone attention avoid bake balkanize
    bank begin  behold believe  bend benefit bevel  beware bless  boil bomb
    boost brace break bring broil brush build ...
    #+end_quote

  - ~VBD~  :: *verb*,  *past  tense*
    #+begin_quote
    dipped pleaded swiped regummed soaked tidied convened halted registered
    cushioned  exacted   snubbed  strode  aimed  adopted   belied  figgered
    speculated wore appreciated contemplated ...
    #+end_quote

  - ~VBG~  :: *verb*,  *present participle  or gerund*
    #+begin_quote
    telegraphing  stirring  focusing  angering judging  stalling  lactating
    hankerin'  alleging  veering  capping approaching  traveling  besieging
    encrypting interrupting erasing wincing ...
    #+end_quote

  - ~VBN~ ::  *verb*, *past  participle*
    #+begin_quote
    multihulled dilapidated  aerosolized chaired languished  panelized used
    experimented  flourished imitated  reunifed factored  condensed sheared
    unsettled primed dubbed desired ...
    #+end_quote

  - ~VBP~  ::  /[V]er[B] [P]resent/  *verb, present  tense, not  3rd person
    singular*

    #+begin_quote
    predominate wrap resort  sue twist spill cure  lengthen brush terminate
    appear  tend  stray  glisten   obtain  comprise  detest  tease  attract
    emphasize mold postpone sever return wag ...
    #+end_quote

  - ~VBZ~ ::  *verb, present tense,  3rd person singular*
    #+begin_quote
    bases reconstructs  marks mixes displeases seals  carps weaves snatches
    slumps  stretches  authorizes   smolders  pictures  emerges  stockpiles
    seduces fizzes uses bolsters slaps speaks pleads ...
    #+end_quote

  - ~MD~ :: *modal auxiliary*
    #+begin_quote
    can cannot could  couldn't dare may might must need  ought shall should
    shouldn't will would
    #+end_quote

- Adverb  (describes, limits)  ::  a  modifier of  an  adjective, verb,  or
  another adverb (very, quite). Adverbs make language more precise.
  - ~RB~  :: /Adve[RB]/  *adverb*
    #+begin_quote
    occasionally   unabatingly    maddeningly   adventurously   professedly
    stirringly  prominently   technologically  magisterially  predominately
    swiftly fiscally pitilessly
    #+end_quote

  - ~RBR~ ::  *adverb, comparative*
    #+begin_quote
    further  gloomier   grander  graver  greater  grimmer   harder  harsher
    healthier heavier  higher however  larger later leaner  lengthier less-
    perfectly lesser lonelier longer louder lower more
    #+end_quote

  - ~RBS~ ::  *adverb, superlative*
    #+begin_quote
    best  biggest   bluntest  earliest  farthest  first   furthest  hardest
    heartiest highest largest least less most nearest second tightest worst
    #+end_quote

  - ~WRB~  ::   *Wh-adverb*  how   however  whence  whenever   where  whereby
    =whereever= wherein whereof why
- Preposition (relates)  :: a word  that relates words  to each other  in a
  phrase or sentence  and aids in syntactic context  (in, of). Prepositions
  show the  relationship between a noun  or a pronoun with  another word in
  the sentence.
  - ~IN~ :: *preposition or conjunction, subordinating*
    #+begin_quote
    astride among  uppon whether  out inside pro  despite on  by throughout
    below within  for towards near behind  atop around if like  until below
    next into if beside ...
    #+end_quote

- Conjunction (connects) :: a syntactic connector; links words, phrases, or
  clauses (and, but). Conjunctions connect words or group of words
  - ~CC/CCONJ~ :: [[https://universaldependencies.org/u/pos/CCONJ.html][CCONJ]] *conjunction*, *coordinating*  &
    #+begin_quote
    'n  and both  but either  et  for less  minus  neither nor  or plus  so
    therefore times v. versus vs. whether yet
    #+end_quote

- Interjection (expresses  feelings and emotions) ::  an emotional greeting
  or exclamation (Huzzah, Alas).  Interjections express strong feelings and
  emotions.
  - ~UH~ :: *interjection*
    #+begin_quote
    Goodbye Goody  Gosh Wow Jeepers  Jee-sus Hubba Hey Kee-reist  Oops amen
    huh howdy  uh dammit whammo  shucks heck anyways whodunnit  honey golly
    man baby diddle hush sonuvabitch ...
    #+end_quote

- Article  (describes, limits)  /  Determiner ::  a  grammatical marker  of
  definiteness (the) or  indefiniteness (a, an). The article  is not always
  listed among the parts of speech. It is considered by some grammarians to
  be a type of adjective[15] or  sometimes the term 'determiner' (a broader
  class) is used.
  - ~DT, DET~ :: [[https://universaldependencies.org/u/pos/DET.html][DET]] *determiner*
    #+begin_quote
    all an another  any both del each  either every half la  many much nary
    neither no some such that the them these this those
    #+end_quote
  - ~WDT~ :: *WH-determiner*
    #+begin_quote
    that what whatever which whichever
    #+end_quote
- Other ::
  - ~CD~ :: *numeral*, *cardinal*
    #+begin_quote
    mid-1890  nine-thirty forty-two  one-tenth ten  million 0.5  one forty-
    seven  1987 twenty  '79 zero  two 78-degrees  eighty-four IX  '60s .025
    fifteen 271,124 dozen quintillion DM2,000 ...
    #+end_quote
  - ~FW~   ::  *foreign   word*
    #+begin_quote
    gemeinschaft hund ich =jeux=  =habeas= =Haementeria= Herr K'ang-si vous
    lutihaw alai  je jour objets  =salutaris= =fille= =quibusdam=  pas trop
    Monte terram fiche oui =corporis= ...
    #+end_quote

  - ~LS~ :: *list item marker*
    #+begin_quote
    A A. B  B. C C. D  E F First G H  I J K One  SP-44001 SP-44002 SP-44005
    SP-44007 Second Third Three Two * a b c d first five four one six three
    two
    #+end_quote

  - ~EX~ :: *existential*
    #+begin_quote
    there
    #+end_quote

  - ~TO~ :: "to" as preposition or infinitive marker to
  - ~PDT~ :: *pre-determiner*
    #+begin_quote
    all both half many quite such sure this
    #+end_quote

  - ~POS~ :: *genitive marker* ' 's
  - ~RP~ :: *particle* [[https://en.wikipedia.org/wiki/Grammatical_particle][Grammatical particle - Wikipedia]]
    #+begin_quote
    aboard about across  along apart around aside at away  back before behind
    by crop down ever fast for forth from go high i.e. in into just later low
    more off on open out over per  pie raising start teeth that through under
    unto up up-pp upon whole with you
    #+end_quote

    #+call: nlp_parse("It turned out this way")

    #+RESULTS:
    #+begin_example
         ROOT
          |
          S
      ____|_____
     |          VP
     |     _____|________
     NP   |    PRT       NP
     |    |     |    ____|___
    PRP  VBD    RP  DT       NN
     |    |     |   |        |
     It turned out this     way

    #+end_example


  - SYM  :: *symbol*  ~%  & '  ''  ''. )  ).  * +  ,.  < =  >  @ A[fj]  U.S
    U.S.S.R * ** ***~

** Phrase level POS tags

[[http://surdeanu.cs.arizona.edu/mihai/teaching/ista555-fall13/readings/PennTreebankConstituents.html][Penn Treebank Constituent Tags ]]

TODO:  create  a list  of  possible  subnodes  kinds for  each  constituent
structure. What kinds of subnodes can be expected in various places.

- ~ADJP~ :: Adjective Phrase.
- ~ADVP~ :: Adverb Phrase.
- ~CONJP~ :: Conjunction Phrase.
- ~FRAG~ :: Fragment.
- ~INTJ~ :: Interjection. Corresponds approximately to the part-of-speech tag
  UH.
- ~LST~ :: List marker. Includes surrounding punctuation.
- ~NAC~ ::  Not a Constituent; used  to show the scope  of certain prenominal
  modifiers within an NP.
- ~NP~ :: Noun Phrase.
  - ~NP-TMP~ :: "When" -- NP which is used as an indicator of time in place
    where adverb could be used instead.
    #+call: nlp_parse("obviously I  think about it every single day")

    #+RESULTS:
    #+begin_example
                         ROOT
                          |
                          S
         _________________|________
        |      |                   VP
        |      |     ______________|__________
        |      |    |          PP             |
        |      |    |      ____|___           |
       ADVP    NP   |     |        NP       NP-TMP
        |      |    |     |        |     _____|_____
        RB    PRP  VBP    IN      PRP   DT    JJ    NN
        |      |    |     |        |    |     |     |
    obviously  I  think about      it every single day

    #+end_example

- ~NX~  :: Used  within certain  complex  NPs to  mark  the head  of the  NP.
  Corresponds very roughly to N-bar level but used quite differently.
- ~PP~ :: Prepositional Phrase.
- ~PRN~ :: Parenthetical.

  Apparently parentheses themselves are not always required.
  #+call: nlp_parse("I am glad it is done")

  #+RESULTS:
  #+begin_example
              ROOT
               |
               S
        _______|____________
      PRN           |       |
       |            |       |
       S            |       |
    ___|___         |       |
   |       VP       |       VP
   |    ___|___     |    ___|___
   NP  |      ADJP  NP  |       VP
   |   |       |    |   |       |
  PRP VBP      JJ  PRP VBZ     VBN
   |   |       |    |   |       |
   I   am     glad  it  is     done

  #+end_example

- ~PRT~ :: Particle. Category for words that should be tagged RP.

- ~QP~ :: Quantifier Phrase (i.e. complex measure/amount phrase); used within
  NP.
- ~RRC~ :: Reduced Relative Clause.
- ~UCP~ :: Unlike Coordinated Phrase.
  #+call: nlp_parse("He slept for about a day or so")

  #+RESULTS:
  #+begin_example
       ROOT
        |
        S
    ____|____
   |         VP
   |     ____|_________
   |    |              PP
   |    |     _________|_______
   |    |    |                UCP
   |    |    |          _______|_______
   |    |    |         PP          |   |
   |    |    |     ____|___        |   |
   NP   |    |    |        NP      |  ADVP
   |    |    |    |     ___|___    |   |
  PRP  VBD   IN   IN   DT      NN  CC  RB
   |    |    |    |    |       |   |   |
   He slept for about  a      day  or  so

  #+end_example

- ~VP~ :: Verb Phrase [[https://dictionary.cambridge.org/grammar/british-grammar/verb-phrases][Verb phrases - Grammar - Cambridge Dictionary]]
  #+call: nlp_parse("Could have been used ")

  #+RESULTS:
  #+begin_example
             ROOT
              |
              S
              |
              VP
     _________|____
    |              VP
    |     _________|____
    |    |              VP
    |    |          ____|___
    |    |         |        VP
    |    |         |        |
    MD   VB       VBN      VBN
    |    |         |        |
  Could have      been     used

  #+end_example


- ~WHADJP~ :: Wh-adjective Phrase.  Adjectival phrase containing a wh-adverb,
  as in how hot.
- ~WHAVP~ ::  Wh-adverb Phrase. Introduces  a clause with  an NP gap.  May be
  null (containing the 0 complementizer) or lexical, containing a wh-adverb
  such as how or why.
- ~WHNP~ :: Wh-noun Phrase.  Introduces a clause with an NP  gap. May be null
  (containing the  0 complementizer)  or lexical, containing  some wh-word,
  e.g.  who,  which book,  whose  daughter,  none  of  which, or  how  many
  leopards.
- ~WHPP~   ::  Wh-prepositional  Phrase.  Prepositional  phrase containing  a
  wh-noun  phrase (such  as of  which or  by whose  authority) that  either
  introduces a PP gap or is contained by a WHNP.
- ~X~ :: Unknown, uncertain, or unbracketable. X is often used for bracketing
  typos and in bracketing the...the-constructions.

** Clause level POS tags

- ~S~ ::  simple declarative  clause, i.e.  one that is  not introduced  by a
  (possible empty) subordinating conjunction or a wh-word and that does not
  exhibit subject-verb inversion.
  #+call: nlp_parse("Rex barks")

  #+RESULTS:
  #+begin_example
      ROOT
       |
       S
    ___|_____
   NP        VP
   |         |
  NNP       VBZ
   |         |
  Rex      barks

  #+end_example

- ~SBAR~   ::  Clause   introduced  by   a  (possibly   empty)  subordinating
  conjunction.
- ~SBARQ~ :: Direct question introduced by a wh-word or a wh-phrase. Indirect
  questions and relative clauses should be bracketed as SBAR, not SBARQ.

  #+call: nlp_parse("Who barks")

  #+RESULTS:
  #+begin_example
        ROOT
         |
       SBARQ
    _____|_____
   |           SQ
   |           |
  WHNP         VP
   |           |
   WP         VBZ
   |           |
  Who        barks

  #+end_example

- ~SINV~  :: Inverted  declarative sentence,  i.e. one  in which  the subject
  follows the tensed verb or modal.
- ~SQ~   ::  Inverted  yes/no  question,  or main  clause  of a  wh-question,
  following the wh-phrase in SBARQ.

  #+call: nlp_parse("Who is barking")

  #+RESULTS:
  #+begin_example
        ROOT
         |
       SBARQ
    _____|____
   |          SQ
   |      ____|_____
  WHNP   |          VP
   |     |          |
   WP   VBZ        VBG
   |     |          |
  Who    is      barking

  #+end_example

** POS dependency types

- Comprehensive list [[https://universaldependencies.org/#language-en][Universal Dependencies]]
- The [[https://github.com/clir/clearnlp-guidelines/blob/master/md/specifications/dependency_labels.md][list]] of dependency labels that might be used by the =spaCy=
- [[https://emorynlp.github.io/ddr/doc/pages/overview.html][Deep Dependency Guidelines]] - has parsed tree examples for some of the
  dependency tags.


- ACL :: Clausal modifier of noun
- ACOMP :: Adjectival complement
- ADVCL :: Adverbial clause modifier
- ADVMOD :: Adverbial modifier
- AGENT :: Agent
- AMOD :: Adjectival modifier
- APPOS :: Appositional modifier
- ATTR :: Attribute
- AUX :: Auxiliary
- AUXPASS :: Auxiliary (passive)
- CASE :: Case marker
- CC :: Coordinating conjunction
- CCOMP :: Clausal complement
- COMPOUND :: Compound modifier
- CONJ :: Conjunct
- CSUBJ :: Clausal subject
- CSUBJPASS :: Clausal subject (passive)
- DATIVE (DAT)  ::   Dative is either the indirect object  or a preposition
  phrase that carries the same thematic role as the indirect object.

  - /"The woman gave the book [to the man]_dat"/
  - /"John sent a book [to you]_dat"/

- DEP :: Unclassified dependent
- DET :: Determiner
- DOBJ :: Direct Object
- EXPL :: Expletive
- INTJ :: Interjection
- MARK :: Marker
- META :: Meta modifier
- NEG :: Negation modifier
- NOUNMOD :: Modifier of nominal
- NPMOD :: Noun phrase as adverbial modifier
- NSUBJ :: Nominal subject
- NSUBJPASS :: Nominal subject (passive)
- NUMMOD :: Number modifier
- OPRD :: Object predicate
- PARATAXIS :: Parataxis
- PCOMP :: Complement of preposition
- POBJ :: Object of preposition
- POSS :: Possession modifier
- PRECONJ :: Pre-correlative conjunction
- PREDET :: Pre-determiner
- PREP :: Prepositional modifier
- PRT :: Particle
- PUNCT :: Punctuation
- QUANTMOD :: Modifier of quantifier
- RELCL :: Relative clause modifier
- ROOT :: Root
- XCOMP :: Open clausal complement

** Punctuation naming

Taken from [[https://ell.stackexchange.com/questions/108169/what-do-programmers-call-these-punctuation-marks-parentheses-brackets-ticks][here]] (and slightly modified) - just to be self-consistent.

- general symbols
  - ~(~ :: open paren
  - ~)~ :: close paren
  - ~[~ :: open bracket  or open square bracket
  - ~]~ :: close bracket or close square bracket
  - ~{~ :: open curly    or open curly bracket
  - ~}~ :: close curly   or close curly bracket
  - ~<~ :: open angle    or open angle bracket   or less than
  - ~>~ :: close angle   or close angle bracket  or greater than
  - ~|~ :: pipe
  - ~"~ :: double quote
  - ~'~ :: single quote
  - ~:~ :: colon
  - ~;~ :: sem     or semicolon
  - ~!~ :: exclamation mark
  - ~^~ :: hat     or caret
  - ~°~ :: degree  or degrees or degree sign
  - ~#~ :: pound   or number  or sharp  or hash sign
  - ~`~ :: back tick
  - ~´~ :: tick
  - ~§~ :: section sign
  - ~-~ :: hyphen  or minus
  - ~_~ :: underline
  - ~~~ :: tilde
- some additions
  - ~([{}])~ :: closing/opening delimiters

** Libraries

*** =spacy=

#+caption: Installing language models
#+begin_src sh
python3 -m spacy download <model_name>
# for example (language model used in the documentation)
python3 -m spacy download en_core_web_sm
#+end_src

#+caption: Starting visualization
#+begin_src python
import spacy
from spacy import displacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("This is a sentence.")
displacy.serve(doc, style="dep")
#+end_src

#+caption: Spacy plaintex visualization (require ~deplacy~ installation)
#+begin_src python :results output
import spacy
import deplacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Rex barks")
deplacy.render(doc)
#+end_src

#+RESULTS:
: Rex   PROPN <╗ compound
: barks NOUN  ═╝ ROOT

#+caption: Spacy graphviz visualization
#+begin_src python
import spacy
import deplacy
import os

nlp = spacy.load("en_core_web_sm")
doc = nlp("I like Nim a lot, but I'm also unsure of its' general direction.")
text = deplacy.dot(doc)

with open("/tmp/graph.dot", 'w') as file:
    file.write(text)

os.system("dot -Tpng -o /tmp/graph.png /tmp/graph.dot")
#+end_src

** =nltk=

*** Constituency parsing

I swear I've seen an easier method  somewhere else, but from what I've seen
the  "best"  solution   for  getting  a  tree  structure  is   now  to  use
~CoreNLPParser~ solution. Setup is pretty annoying because it involves some
manual configuration and stuff.

First of all, you need to install  the =nltk= library itself. Then you need
to     download     the     Stanford    language     model     (?)     from
https://stanfordnlp.github.io/CoreNLP/download.html  --  "Download  CoreNLP
X.X.X". After you downloaded the zip file, extract it into some directory.

Then you  need to  /launch the NLP  server/ and only  after ensuring  it is
correctly  started you  can  run the  analysis script.  The  server can  be
launched using

#+caption: Start Stanford Core NLP server
#+begin_src python
from nltk.parse.corenlp import CoreNLPServer
import os

VERSION = "4.5.1"
STANFORD = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    f"stanford-corenlp-{VERSION}"
)

# Create the server
server = CoreNLPServer(
   os.path.join(STANFORD, f"stanford-corenlp-{VERSION}.jar"),
   os.path.join(STANFORD, f"stanford-corenlp-{VERSION}-models.jar"),
)

# Start the server in the background
server.start()
#+end_src

This script assumes  you've unpacked the NLP archive in  the same directory
as the  script.

NOTE:  the ~CoreNLPServer~  fails to start  it will  give a
rather confusing error message in regards to the missing file path:

#+begin_example
Could not find stanford-corenlp-(\d+)\.(\d+)\.(\d+)\.jar jar file at stanford-corenlp-4.5.1
#+end_example

Despite  the use  of  regex-like  patterns it  does  not  search treat  the
arguments to  the server as  /directories to  search for/ --  arguments are
files and  checked as such. So  this message actually means  ~"no such file
'stanford-corenlp-4.5.1'"~.  I was  pretty confused  by this  error when  I
tried to pass unpacked directory itself to the constructor.

After server script has started and  you ensured it is running successfully
you can execute the NLP tree parser code itself.

#+caption: Example NLP parser
#+begin_src python :results output
from  nltk.parse.corenlp  import CoreNLPParser

parser = CoreNLPParser()
parse = next(parser.raw_parse("I put the book in the box on the table."))
parse.pretty_print()
#+end_src

#+RESULTS:
#+begin_example
                         ROOT
                          |
                          S
  ________________________|______________________________
 |                        VP                             |
 |    ____________________|________________              |
 |   |       |            PP               PP            |
 |   |       |         ___|____         ___|___          |
 NP  |       NP       |        NP      |       NP        |
 |   |    ___|___     |    ____|___    |    ___|____     |
PRP VBD  DT      NN   IN  DT       NN  IN  DT       NN   .
 |   |   |       |    |   |        |   |   |        |    |
 I  put the     book  in the      box  on the     table  .

#+end_example

NOTE: if you  get the "connection refused" error, check  the server startup
routine.

You can also execute  the code in the Jupyter notebook and  render it as an
SVG image, but you would need to have the =svgling= library installed.

#+caption: Parse NLP for Jupyter notebook display
#+begin_src python
from  nltk.parse.corenlp  import CoreNLPParser

parser = CoreNLPParser()
next(parser.raw_parse("I put the book in the box on the table."))
#+end_src

* Main parts of the sentence

** noun
** pronoun
** verb
** adjective
** adverb
** preposition
** conjunction
** interjection

* Times/Tenses

** Past
*** Past simple
    Past action, no realtion to any other event. Stating a fact, unspecific time in the past

    #+begin_example
    [action]
               [now]

    #+end_example

    - V-ed
*** Past perfect
    Activity had finished at certain point in time, in the past.

    #+begin_example
    [action] < (point in time)
                       [now]
    #+end_example
    - **had** + V-ed
    - examples:
      - I met them **after** they **had divorced**.
      - Yesterday at 2pm, I had just baked a cake.

    - Usage
      "Had already X" is used for actions that were started and completed in the past, without specifying a concrete point.
*** Past perfect progressive
    Action which started in the past and continued to happen after another action or time in the past. Something in the sentence must be used as a reference point.

    #+begin_example
    [action-start] .............
                         [now]
    #+end_example
    - **had been** + V-ing
    - examples:
      - Sara **had been working** here **for two weeks** when she had the accident
*** Past progressive
    Action that was happening in the past, but no information about it's completion status.

    #+begin_example
    ...... [action] .......
                    [now]
    #+end_example
    - **was/were** + V-ing
    - examples:
      - Yesterday at 2 pm, I was baking a cake.
*** Usage

    Something happened: `[past simple]`

    One thing happened after another: `[past simple] after [past perfect]`

    Started after event, and then continued: `[past perfect continious] for X time` (for X time is an example
*** Extra
    - Passive voice
      Created by adding `was` or `were`.
** Present
*** Present simple
    Stating a fact, general unspecified time in the present
    - V
*** Present progressive
    Ongoing action
    - V-ing
*** Present perfect
    Action just finished
    - Have + V-ed
    - Usage
      Modal verb might be used - "could have known", "would have used"

      "Have already X" is used for actions that *just* completed, but were started in the past
*** Present perfect progressive
    Continious state of events in the present
    - Have been + V-ing
** Future
*** Future simple
    Fact about event in the future
    - Will/would + V
*** Future progressive
    Fact about continuous event in the future
    - Will/would be + V-ing
*** Future perfect
    Planning to finish the action at a certain point in the future.
    - Will/would have + V-ed
*** Future perfect progressive
    Point in the future at which action had been going on for some time, but hadn't finished yet.
    - Will/would have been + V-ing
*** Usage
    - will/would
      The main difference between will and would is that **will is used for real possibilities while would is used for imagined situations in the future**.
** Inbox
  - "was integrated" -
    and the errant Ballantine branch of revision (including the ‘Estella Bolger’ addition) was integrated into the main branch of textual descent

* Punctuation
** Comma

The comma ~(,)~ is used to show a separation of ideas or elements
within the structure of a sentence. Additionally, it is used in letter
writing after the salutation and closing.

*** Before and/or

Called "Oxford comma". Can be used both ways, but you need to choose a way
you write and don't switch back and forth between with-comman and no-comma

*** That/which in restrictive and non-restrictive clauses. Commas

*Restrictive* clause - removing it will significantly alter meaning of a
sentence (such clauses /restricts/ the meaning). Restrictive clauses are
not set off by commas, usually (?) start with "that".

*Nonrestrictive* clause - can be removed without altering the sentence
meaning too much. Nonrestrictive clauses are offset by commas, sort of like
parentheses, and usually start with "which".

- [[https://www.diffen.com/difference/That_vs_Which][That vs Which - Difference and Comparison | Diffen]]

** Semicolon

The semicolon ~(;)~ is used to connect independent clauses. It shows a
closer relationship between the clauses than a period would show.

#+begin_quote
Grammatically, the semicolon almost always functions as an equal sign; it
says that the two parts being joined are relatively equal in their length
and have the same grammatical structure. Also, the semicolon helps you to
link two things whose interdependancy you wish to establish. The sentence
parts on either side of the semicolon tend to "depend on each other" for
complete meaning. Use the semicolon when you wish to create or emphasize a
generally equal or even interdependent relationship between two things.
#+end_quote

[[https://www.e-education.psu.edu/styleforstudents/c2_p5.html][credit:]]


In places where you could've written a new sentence, but decided to keep things more "joined"

- Sentence with connector - __and, but, or, nor__, etc.

  #+begin_quote
  When I finish here, <<and I will soon>, I’ll be glad to help you>; and
  that is a promise I will keep.
  #+end_quote

- Colon A colon means “that is to say” or “here’s what I mean.” Colons and
  semicolons should never be

* Text formatting

- ~_sometext_~ -> _sometext_ :: _underline_ words whose /definition/
  is important at that moment or they have important structural
  meaning in given sentence. Second one is mostly related to different
  proof and theorems there words such as _if, then, where_ and
  contructs _if we have_ ... _then we will get_ are very important and
  spotting them easily will increase readablility significantly.
- ~/sometext/~ -> /sometext/ :: use _italic_ in places where you need
  to put accent on the /meaning/ of the word or it's intonation.
- ~*sometext*~ -> *sometext* :: use _bold_ where you need to *draw
  attention* to the word: don't put too many words at once in
  accents - it diminishes their value (if all text is accented it is
  kind of hard to find out /what exactly/ you wanted to draw attention
  to). To indicate things like raised voice in dialogue, name of the
  new concept for which you are providing definitions.
- ~~sometext~~ -> ~sometext~ :: use _monospaced_ in places where text
  inside signifies some action/command/sequence which has to be used
  in a particular environment. Things like code snippets, shortcut
  definitions, names of the functions and classes in documentation.
- ~=sometext=~ -> =sometext= :: use _verbatim_ in places where you
  need to show /name/ of some entity. For example names of the
  programs, terms etc. Basically things that you would put in glossary
  at the end of the book.
- ~$sometext$~ -> $sometext$ :: aside from obvious things like inline
  equations (and similar things that might require sub/super-script)
  also use _latex_ for things that describe points, set names etc.
- ~some-thing-that-has-no-word-for-it~ :: If I want to indicate that
  something is a singular /concept/ I tend to write everything using
  dashes instead of spaces. It heavily depends on context and can
  always be replaced with regular sentence but sometimes I feel it
  might be better to *really* show that this thing is something
  /singlular/. Kind of hard to describe this one but I think it might
  be possible to get them meaning of such markup when you encounter
  it: just try to read it as a long word with only small breaks
  inbetween, maybe this will do the trick.
- ~<sometext>~ :: placeholder
- ~"sometext"~ :: direct speech (speech for example)
- ~'sometext'~ :: inline quote
- single tilda: ~~text~ :: means 'approximately'
- ~WORD:~ :: this markup is derived from Asciidoctor. It serves the
  same purpose as tags, albeit very specific ones - geared toward use
  in documentation. In asciidoctor there is only several of them:
  =NOTE=, =TIP=, =IMPORTANT=, =CAUTION=, =WARNING=.
  - Emacs' ~hl-todo~ allows to define custom words. They are mostly
    used in code comments. My configuraion includes
    - =TODO= - need to do something
    - =NEXT= - next planned action
    - =THEM=
    - =PROG=
    - =OKAY=
    - =REVIEW= - architectural/API decision must be reviewed
    - =IDEA= - potential todo, api improvement etc
    - =REFACTOR= - this portion of code requires refactoring
    - =DONT=
    - =DOC= - documentation-related todo
    - =FAIL=
    - =ERROR=
    - =TEST= -
    - =WARNING= - potential source of errors in the future
    - =IMPLEMENT= - functionality has not been fully implemented yet and
      needs more attention later on.
    - =DONE= - task has been completed
    - =NOTE= - useful information for the reader or self-note that I should
      keep in mind later on.
    - =QUESTION= - currently I have little to no idea how this should be
      handled or the code is not exactly clear. This tag can be used as a
      reviewer guide. Person reading the diff can see a newly introduced
      question and might even provide an explanation.
    - =KLUDGE=
    - =HACK= - temporary solution that needs to be replaced with more
      permanent one.
    - =TEMP=
    - =FIXME= - code does not work as expected
    - =XXX=
    - =XXXX= -
    - =BUGFIX= - comment related to some piece of code when it is not
      exactly obvious why it is there (but it was introduces as a fix for
      some kind of a bug).
  - Org-mode also provides customization for todo keywords. My
    configuration includes:
    - =TODO=
    - =LATER=
    - =NEXT=
    - =POSTPONED=
    - =IN_PROGRESS=
    - =STALLED=
    - =REVIEW= - take a second look at the problem, try to evaluate it from
      a different perspective. When written in the PR can bee seen as an
      annotation for the reviewer to pay more attention to the specific
      piece of code.
    - =DONE=
    - =COMPLETED=
    - =NUKED=
    - =PARTIALLY=
    - =CANCELED=
    - =FAILED=
    - =FUCKING___DONE=
  - I also use keywords like this in commit headers.
    - =!!!= Has breaking change
    - =>>>= Non-buildable commit that should not be used, but need to be
      retained for some other purpose. Important intermediate step in
      refactoring or something similar.
    - =WIP= Partial implementation of some features. Not all required parts
      are working, but whatewher is implemented is good enough to commit
      it.
    - =???=
    - =CLEAN= File/code-related cleanup. Not refactoring - just some
      cosmetic changes.
    - =FEATURE= New features is implemented
    - =FIX(type)= :: bug fix text in parenthesis can be any of: =[comp,
      run, algo, ux]=
    - =REFACTOR=
    - =STYLE=
    - =DOC= Documentation update
    - =TEST= Change in tests
    - =HACK= - Implementation quality leaves a lot to be desired, but at
      least the code works. Sometimes used to annotate a quick and dirty
      solution to preexisting problem that had to be fixed anyway.
    - =REPO= Changes affecting repository. CI configuration, version
      changes, dependency updates.
  - RFC 2119 defines several keywords to indicate requirement levels
    - =MUST=
    - =MUST NOT=
    - =REQUIRED=
    - =SHALL=
    - =SHALL NOT=
    - =SHOULD=
    - =SHOULD NOT=
    - =RECOMMENDED=
    - =MAY=
    - =OPTIONAL=
  - RFC 6919 further expands list of keywords to indicate requrement
    levels and provide definition for more specific cases
    - =MUST (BUT WE KNOW YOU WON'T)=
    - =SHOULD CONSIDER=
    - =REALLY SHOULD NOT=
    - =OUGHT TO=
    - =WOULD PROBABLY=
    - =MAY WISH TO=
    - =COULD=
    - =POSSIBLE=
    - =MIGHT=

* Writing different types of text/sentences

** A vs B

- "should probably" VS "probably should" :: Both are completely correct,
  but have slightly different emphasis. "I should probably do X" emphasizes
  more that X is the thing you should probably be doing. "I probably should
  do X" emphasizes more that you should probably be doing something, and
  that thing is X. [[https://forum.wordreference.com/threads/i-should-probably-i-probably-should.2653618/][source]]

** Narration

Consider starting narration sentences with the "Like, What, Who, Where,
When, How, and Because". Instead of writing "he thought about who might it
be?" Just write a regular "who might it be" sentence. It is not necessary
to attach every action to the specific person

** Dialogue or direct speech

*** Punctuation and quote placement

Only direct dialogue requires quotation marks. Direct dialogue is
someone speaking. Indirect dialogue is a report that someone spoke.
The word that is implied in the example of indirect dialogue.

Single line dialogue is quoted. If dialogue tag comes after quoted
part it is not capped and punctuation is placed inside of the quotes.
If tag comes before quoted part both of them are capped and
punctuation is places outside of the quotes.

 - ~<DT>, "<DIA>."~
 - ~"<DIA>," <DT>.~
 - ~"<DIA>," <DT>, <ACT>~
 - ~<ACT>, <DT>, "<DIA>."~
 - ~"<DIA>," <DT>, "<DIA>"~
 - ~"<DIA>," <DT>, <ACT>, "<DIA>"~
 - ~"<DIA>," <DT>, <ACT>. "<DIA>."~
 - ~"<DIA>" - <ACT> - "<DIA>."~
 - ~"<DIA '<quote withing the dialogue>'"~

Where

- ~<DT>~ - dialogue tag is a phrase that precedes, breaks up, or follows a
  bit of written dialogue and establishes who the speaker is, how they are
  delivering the dialogue, and whether or not a new speaker is talking

  NOTE: you can google for the "dialogue tags" examples/lists, if you feel
  like the writing is a bit too repetitive. Surface google search shows
  that frequent use of "said" is mostly a matter of preferences, but some
  variation can't hurt.

  - /"I hate this", someone said/. ~DT = someone said~



- ~<DIA>~ - dialogue itself, direct speech by the person
- ~<ACT>~ - description of some action

http://theeditorsblog.net/2010/12/08/punctuation-in-dialogue/

** Commit messages

In  addition general  guidelines  such  as 50/72  line  width  limit it  is
important to consider the content of the  message and how it relates to the
code  changes. Obviously  rubbish such  as  ~fixes #1231~  should never  be
written under any  circumstances, but there are some more  rules that could
help compose a good text that would be useful for a reader.

-----

I  think  writing  commit  message and  incrementally  updating  it  (using
src_sh{git  commit  --amend}  to  change the  text  and  src_sh{git  commit
--extend} to add new changes) is a  good way to ensure no important changes
are missed in  the log. It does not  have to be a perfect  message from the
start, things can be refined later on.

-----

Some common patterns I've seen (or wrote myself) in different logs that can
be trivially improved (with examples from said logs).

- "Correctly handle   X" or "Handle  X in Y"   ::  Commonly seen  in bugfix
  commits. Should contain description of what was wrong in the first place.
  - /"3a59838  Correctly parse  big ident  words like  `NOTE`"/. Apparently
    this is something parser-related and  if the change is relatively small
    it should probably be enough to just provide before/after description:

    #+begin_quote
The parser  incorrectly handled input such  as `"NOTE"` - instead  of being
recognized as  big ident  it was  converted into  a <something  else>. This
commit improves the edge case and adds tests.
    #+end_quote

    A bit boiler-plate-y, but has the before/after component.
- "Fix <subsystem name>  bug" :: Large  number of commits are bug fixes and
  there are several major categories of bugs[fn:bugs-636] - "Not handled an
  edge case", ""

  - /"fixes #18665 DFA generator  bug (#18676)"/. Assuming ~#12345~ rubbish
    has been magically  replaced we are effectively looking  at the /"fixes
    DFA  generator bug"/.  Looking  at  the issue  tracker  I  was able  to
    discover the  original issue description  which turned out to  be /"ref
    field in object set to nil by compiler when used with copy hook"/

    The change itself  is rather trivial - adding five  lines to some file.
    Commits like these  are among the most annoying to  create when writing
    something - after all the change is "simple" - just a minor bug that we
    fixed and  it should be "obvious"  to anyone who is  familliar with the
    subject area what went wrong in here, right?

    My  answer to  this is  no  - that's  not  right. Obviously  it is  not
    required to write  a while dissertation detailing the pros  and cons of
    each  and every  trivial patch,  but gaps  like these  might eventually
    combine into  something much nastier,  where some  part of a  system is
    looks like a patchwork of unrelated changes.

    If I  were to re-write  the commit message  I probably would  have used
    this instead:

    #+begin_quote
    Handle ref fields in the copy hook

    Previously any[fn:1] ref fields was set  to nil by the compiler when it
    was used with a copy hook. This commit <actual change description>
    #+end_quote

    Effectively you  can write the  code comment in the  change description
    part  - why  some logic  is added  in the  code and  what edge  case it
    considers.

    # FIXME the text is pretty  badly structured without actual explanation
    # of the changes done - things  need to be concrete here, otherwise all
    # of  this is  just a  random metal  constructions that  can hardly  be
    # applied in the real use case.
    #
    #
    # https://github.com/nim-lang/Nim/commit/bc14b773
    # https://github.com/nim-lang/Nim/issues/18665

[fn:1] Whether the bug was triggered by every single "ref field" or only by
a select few is also something that could be added.

- "Update <X>" :: TODO
- "Disable <X> if <Y>" :: TODO
- "Add <X>" :: TODO



[fn:bugs-636]   Quick google  search  reveals categories  such as  "Logic",
"Programming", "Security", but  I will be using  an informal categorization
that is mostly rooted in the  bug *fix descriptions* rather than underlying
problem categorization.

[fn:any-663]

* Other things

** Determiner

Some kind of /determiner/ or /quantifier/ is almost always required (except
with proper nouns, plural nouns, and "uncountable" nouns). Examples of such
determiners are

- definite article *the*
- *my*
- *this*
- *every*
- etc. (?)

[[https://dictionary.cambridge.org/grammar/british-grammar/determiners-the-my-some-this][Determiners (the, my, some, this) - English Grammar Today - Cambridge
Dictionary]]

** Definite article "the"

- when listing multiple things :: ~The <A>, <B>, <C>, <D> and <E>~ - it is
  not /wrong/ to add an article before each of the ~<A-E>~ in this case,
  but it is not mandatory either.

** "had", "has", "have" etc. in different contexts

- "have been" / "has been" :: used to mean that something began in the past
  and has lasted into the present time.
  - "He has been working here for two years"
- "had been" ::  used to mean that  something happened in the  past and has
  already ended.
  - "He had been working here until the last month"
- "will have been" / "will has been" ::

* Markup languages

** Org-mode

*** Source code block evaluation

- Apply configuration to all source code blocks in the document :: add
  src_org{#+property: header-args} at the top of the file.
- Disable evaluation during export :: ~:eval no-export~
- Export both source code and result :: ~:exports both~

* Reed-Kellogg sentence diagramming

- Verbs ::
  - Transitive active ::  "doer" does "action" and  "receiver" receives it.
    Indirect object is an optional addition of the action.

    - TA :: Transitive active
    - DO :: Direct object
    - IO :: Indirect object

    #+begin_example
     doer | action (TA) | reciever (DO)
    ------+-------------+--------------
          | \ (x)
             \    [indirect object (IO)]
              \___________________
    #+end_example

    - /"Rex [bit (TA)] [Joe (DO)]"/
    - /"He [gave (TA)] [the pirate (DO)] [a chance (IO)]"/
  - Intransitive linking   ::  No action, verb acts as an  "equal" mark and
    links subject  with *predicate  nominative* -- either  (predicate noun)
    (PN) or *predicate adjective* (PA).

    Intransitive linking  verb is  usually one of  the *be*,  (*am*, *are*,
    *is*,  *was*, *were*,  *being*,  *been*),  *become*, *sound*,  *taste*,
    *seem*, *appear*, *smell*, *remain* ...

    #+begin_example
    doer | link (IL) \ predicate nominative (PA/PN)
    -----+-----------+-----------------------------
         |
    #+end_example

    - /"Rex [is (IL)] [happy (PA)]"/
    - /"Rex [is (IL)] [dog (PN)]"/

  - Transitive  passive ::  Subject  receives action.  Doer  of action,  if
    known, is in prepositional phrase after "by"

    #+begin_example
    receiver | action (TP)
    ---------+------------
             | \ by
                \   [reciever]
                 \_______
    #+end_example

    Transitive passive verb  can also include an  optional *retained object
    (RO)* part, making it similar to the intransitive linking.

    #+begin_example
    receiver | action (TP) \ object (RO)
    ---------+-------------+------------
             | \ by
                \   [reciever]
                 \_______
    #+end_example

    In both variants the receiver part is optional.

    - /"Harry [was thrown (TP)] the [ball (RO)]"/
    - /"The ball [was thrown (TP)] to Harry [by me]"/
    - /"Jill [was sent (TP)] [money (RO)]"/

  - Intransitive   complete   ::   Action,   but  no  receiver   (from  the
    grammatical  standpoint --  it might  be "logically"  present). Subject
    does an action.

    #+begin_example
    subject | action (IC)
    --------+------------
    #+end_example

    - /"Rex barks"/
    - /"Rex barks at Joe"/  - in this case the receiver  is present, but it
      is should be placed as a prepositional phrase, not as a direct object
      that "receives barking".
- Nouns ::
  - Subject ::
  - Direct objects ::
  - Indirect objects ::
  - Objects of preposition ::
  - Predicate nominatives ::

- Verbals :: Verb form used as another part of speech -- noun, adjective or
  adverbs.
  - Gerunds ::   Always nouns. Ends up  with "-ing" suffix, can  be used as
    subject/direct object/indirect object/retained object and so on.

    #+caption: One possible use is a subject
    #+begin_example
     do-ing
     ---+--
        |
       / \  | action
     -------+--------
    #+end_example

    Gerund  might  have  a  complement -  predicate  noun  (PN),  predicate
    adjective (PA) or direct object complements (DO).


    #+caption: One possible use is a subject
    #+begin_example
     do-ing | DO/PN/DA
     ---+---+---------
        |
       / \  | action
     -------+--------
    #+end_example

    - /"Running exists"/ -- /"Running"/ is a gerund, used as a subject here.
    - /"Running fast  is dangerous"/ --  /"Running fast"/ is a  gerund with
      predicate adjective.
    - /"Being king is a responsibility"/ -- /"Being king"/ is a gerund with
      predicate noun.

    - Perticiples  ::  Always adjectives. *Present* participles end up with
      "-ing" (e.g. ones  that describe the something in  the current moment
      I'm time.), *past* ones end up in "-d", "-t", or "-n".

      Similarly  to gerunds  participles  can include  a  direct object  or
      predicate nominative.

      Participles  differ from  gerunds  in  a sense  that  they allow  for
      *helping verbs* to be included in.

      TODO nominative absolute

      - /"They  ran  to the  burning  house"/  --  /"burning"/ here  is  an
        adjective for the /"house"/.
      - /"They ran to the house that  was burning"/ -- /"that was burning"/
        is a dependent noun clause introduced by the link word /"that"/
      - /"Raking the lawn, Tom found a dollar"/ -- /"Raking the lawn"/ is a
        participle with /"lawn"/ as the direct object.
      - /"Being  honest,  he  returned  it"/   --  /"Being  honest"/  is  a
        participle with /"lawn"/ as the predicate adjective.
      - /"The work having been finished, the men moved on"/ -- in this case
        /"The work having been finished"/ is the nominative absolute and it
        stands separately  from the  other part  of the  sentence. /"Having
        been finished"/ is  a participle with /"having been"/  is a helping
        verb.

    - Infinitives ::   Nouns,  adjectives or adverbs. Consist  of word "to"
      plus  a  verb.  Infinitives   can  take  optional  *complements*  and
      *adverbial modifiers*. When they do, the whole construction is called
      *infinitive phrase*.

      #+caption: Simple infinitive
      #+begin_example
      subject | verb
      --------+-----
              |\
                \  \ to
                 \  \   verb
                  \  \________
                   \    /\
                    \_________
      #+end_example

      #+caption: Infinitive phrase
      #+begin_example
      subject \to verb | direct object
      --------+--------+--------------
              |
             / \               | verb
      -------------------------+------
                               |
      #+end_example



- Appositive :: An  appositive is a noun (and any  modifiers) that restates
  another noun and shares its construction. TODO
- Objective complement  :: An objective  complement is a noun  or adjective
  that completes  the meaning of the  verb and modifies, names,  or renames
  the direct  object.

  Since these modify, name, or  renamedirect objects, you'll only find them
  in sentences that have direct objects.  That also means the sentence will
  have atransitive active verb.

  Sometimes object complement is introduced by the *expletive* "as".

  #+caption: Diagramming structure with no expletive
  #+begin_example
  subhect | verb | direct object \ objective complement
  --------+------+---------------+---------------------
          |
  #+end_example

  #+caption: Diagramming structure with an expletive
  #+begin_example
                                  as
                                 --+-
  subject | verb | direct object \ : objective complement
  --------+------+---------------+-----------------------
          |
  #+end_example

  - /"This music makes me [happy]"/ -- /"happy"/ is an object complement here
  - /"They  elected my  uncle  [as]  [mayor]"/ --  /"mayor"/  is an  object
    complement and /"as"/ is an expletive.
- Adverbial noun ::  An adverbial noun is a word  which serves the function
  of either a  noun or an adverb  depending on the sentence in  which it is
  used.

  Nouns  dealing in  measurements  of some  kind, such  as  time frames  or
  distances,  are  usually  adverbial  nouns.  Like  adverbs,  these  nouns
  normally modify verbs but can also modify adjectives.

  #+caption: Adverbial noun is diagrammed like a direct object
  #+begin_example
  subject | verb | direct object
  --------+------+--------------
          |\ (x)
            \      adverbial noun
             \___________________
  #+end_example

  TODO better explanation on the particular application cases


- Case ::
  - Nominative  case  ::  Used   for  subjects  and  predicate  nominatives
    (intransitive linking)
    - /"Who goes there"/ - nominative case of the word "who"
  - Possesive case :: Used to show ownership
    - Possessive nouns :: Adding /'s/ to a noun
    - Possessive pronouns :: "mine", "yours", "his", "hers", "its", "ours",
      and "theirs."
    - Possessive  determiners    ::  Sometimes  are also called "possessive
      adjective". "my", "your", "his", "her", "its", "our", and "their".

      "Whose" is a possessive case of the word "who".
  - Objective case :: Used for objects of verbs or prepositions
    - /"Whom did you see?"/ - objective case, the subject here is "you" and
      then direct object is "whom".
    - /"Whom did he ask about?/


- Preposition :: Answers questions such as "why? how? when? where?" or "how
  many? what kind? whose? which ones?"

- Phrases ::
  - Verb phrase :: Main verb and it's helpers
  - Prepositional phrase :: a preposition, its object, and any modifiers of
    the object.
    - Adverb phrase ::
    - Adjective phrases ::
- Clauses ::
  - Main/Independent ::
  - Dependent/Subordinate ::
    - Adverb  clauses ::
      - Usually  answers "why?"  and some  other weird  variations such  as
        "if?" ("under which circumstances?").
      - Introduced by a connecting  word *"after"*, *"because"*, *"until"*,
        *"if"*, *"since"*.
      - Can be  moved in front  of the sentence,  if that happens,  then it
        should be followed by a *comma*.
    - Adjective   clauses  ::  Introduced by  a *relative  pronoun* (*who*,
      *whose*, *whom*, *that*, *which*).  Sometimes relative pronoun can be
      missing and the meaning is inferred from the sentence itself.

      #+begin_example
      subject |
      --------+ ~~~
         :
         :
         that (RP) | action
         ----------+-------
      #+end_example

      - /"The dog  [[that (RP)]  [barked (IC)]] [is  (IL)] [Rex  (PL)]"/ --
        /"[that  barked]"/  is a  dependent  adjective  clause with  "that"
        serving as a relative pronoun.
      - /"I [have  found (TA)]  the [cap  (DO)] [[that (DO  & RP)]  I [lost
        (TA)]]"/ -- /"[that I lost]"/ is a dependent clause with transitive
        active verb "lost" which is used  on the direct object "that" which
        serves as a relative pronoun from  the main clause to the dependent
        one.
      - /"The bid I saw is the you described"/ -- /"that I saw"/

    - Noun clauses :: Dependent clause that is used in place of a noun

      #+caption: Can be used as a direct object
      #+begin_example

                  subject | action | object
                  --------+--------+-------
                          |
      subject | action | / \
      --------+--------+-----
      #+end_example

      #+caption: Can be used a as a subject
      #+begin_example
      subject | action | object
      --------+--------+-------
              |
             / \ | action | object
            -----+--------+-------
      #+end_example

      #+caption: Can be used as a part of preposition phrase
      #+begin_example
      subject | action | object
      --------+--------+-------
              |\ to   subject | action | object |
                \     --------+--------+-------
                 \            |
                  \          / \
                   \____________

      #+end_example

      - /"I know  [what I like]"/  -- /"what I  like"/ is a  dependent noun
        clause  used as  a direct  object  for the  transitive active  verb
        "know". The clause itself also has a TA+DO pair.
      - /"[Whatever you wish] is my command"/ -- /"Whatever you wish"/ is a
        dependent noun close that is used as a subject.
      - /"You gave what he likes no  consideration"/ - /"What he likes"/ is
        an  dependent noun  clause  used  as an  indirect  object for  main
        transitive action clause.
      - /"Pay  attention  to what  he  says"/  --  /"What  he says"/  is  a
        dependent noun clause with "to" as a linking word from the main

  - Elliptical clause   ::  Any clause that  has some parts of the sentence
    omitted.  Usually  it  is  a  subordinating  one.  Most  of  the  times
    introduced by the *"that"* word.

TODO:

* Correct writing structure

Listing logical fallacies, sketch moves in discussions etc. There are a few
sites that provide partial listings, and I've collected them all, sometimes
adding examples. Partially taken from [[https://www.informationisbeautiful.net/visualizations/rhetological-fallacies/][Rhetological Fallacies &#8211; A list
of Logical Fallacies - Rhetorical Devices with examples &mdash; Information
is  Beautiful]]  Quotes were  removed  because  they largely  touched  that
touched topics that  were overly US-centric (like using  Bill Clinton quote
as  an example  of  a "Lie"),  directly  conveyed distracting  inflammatory
opinions. Added translations for Latin-only versions.

More in-depth explanations can be found at [[https://rationalwiki.org/wiki/Main_Page][RationalWiki]].

- *Appeal to the mind*

  - Appeal  to  Anonymous  Authority  :: Using  evidence  from  an  unnamed
    'expert',  'study' or  generalized group  (like 'scientists')  to claim
    something is true.
  - Appeal to Authority :: Claiming  something is true because an 'expert',
    whether qualified or not, says it is.
  - Appeal to  Common Practice ::  Claiming something is true  because it's
    commonly practiced.
  - Appeal to Ignorance ::  A claim is true simply because  it has not been
    proven false (or false because it has not been proven true).
  - Appeal to Incredulity  :: Because a claim sounds  unbelievable, it must
    not be true.
  - Appeal to Money  :: Supposing that, if someone is  rich or something is
    expensive, then it affects the truth of the claim.
  - Appeal to Novelty :: Supposing something is better because it is new or
    newer.
  - Appeal  to Popular  Belief ::  Claiming something  is true  because the
    majority of people believe it.
  - Appeal to  Probability :: Assuming  because something could  happen, it
    will inevitably happen.
  - Appeal  to  Tradition  ::  Claiming  something  is  true  because  it's
    (apparently) always been that way.

- *Appeal to emotions*

  - Appeal to Consequences of a Belief :: Arguing a belief is false because
    it implies something you'd rather not believe.
  - Appeal to Fear :: An argument  is made by increasing fear and prejudice
    towards the opposing side.
  - Appeal to  Flattery :: Using  an irrelevant  compliment to slip  in an
    unfounded claim which is accepted along with the compliment.
  - Appeal  to Nature  :: Making  your claim  seem more  true by  drawing a
    comparison with the "good" natural world.
  - Appeal to Pity :: Attempt to induce pity to sway opponents.
  - Appeal to Ridicule :: Presenting the  opponent's argument in a way that
    makes it appear absurd.
  - Appeal to  Spite :: Dismissing  a claim  by appealing to  personal bias
    against the claimant.
  - Appeal to Wishful Thinking :: Suggesting  a claim is true or false just
    because you strongly hope it is.

- *Faulty deduction*

  - [[https://rationalwiki.org/wiki/Anecdotal_evidence][Anecdotal  Evidence]] ::  Discounting evidence  arrived at  by systematic
    search or testing in favor of a few firsthand stories.
  - [[https://rationalwiki.org/wiki/Category_mistake][Composition]] :: Assuming that characteristics  or beliefs of some or all
    of a group applies to the entire group.
  - [[https://rationalwiki.org/wiki/Category_mistake][Division]]  ::  Assuming  that  characteristics or  beliefs  of  a  group
    automatically apply to any individual member.
  - Design Fallacy :: Assuming that because something is nicely designed or
    beautifully visualized it’s more true.
  - [[https://rationalwiki.org/wiki/Gambler%27s_fallacy][Gambler's    Fallacy]]  ::    Assuming  the history  of  outcomes of  the
    *unrelated events* will affect future outcomes.

    NOTE: if  events are  in fact  related (for  example series  of actions
    conducted by the same entity) this fallacy does not apply.

  - Hasty  Generalization  :: Drawing  a  general  conclusion from  a  tiny
    sample.
  - [[https://rationalwiki.org/wiki/Jumping_to_conclusions][Jumping to  Conclusions]] ::  Drawing a  quick conclusion  without fairly
    considering relevant (and easily available) evidence.
  - [[https://rationalwiki.org/wiki/Balance_fallacy][Middle  Ground]],  Balance fallacy   ::   Assuming  because two  opposing
    arguments  have   merit,  the   answer  must  lie   somewhere  [rightly
    equidistantly] between them.
  - [[https://rationalwiki.org/wiki/Nirvana_fallacy][Perfectionist Fallacy]] :: Assuming that the  only option on the table is
    perfect success, then rejecting anything that will not work perfectly.
  - [[https://rationalwiki.org/wiki/Relativist_fallacy][Relativist Fallacy]] :: Rejecting a claim  because of a belief that truth
    is relative to a person or group.
  - [[https://rationalwiki.org/wiki/Spotlight_fallacy][Spotlight]] :: Assuming  an observation from a small  sample size applies
    to an entire group.
  - Sweeping Generalisation :: Applying a general rule too broadly.
  - Undistributed Middle ::  Assuming because two things  share a property,
    that makes them the same thing.

- *Manipulating content*

  - [[https://rationalwiki.org/wiki/Ad_hoc][Ad   Hoc   Rescue]]    ::    Person presents  a new explanation – that is
    unjustified or  simply unreasonable –  of why their original  belief or
    hypothesis  is correct  after  evidence that  contradicts the  previous
    explanation has emerged.

    Throw more faulty logical constructions into the discussion, maybe your
    opponent will just drown in them.
  - [[https://rationalwiki.org/wiki/Overgeneralization][Biased Generalizing]] :: Generalizing  from an unrepresentative sample to
    increase the strength of your argument.
  - [[https://rationalwiki.org/wiki/Confirmation_bias][Confirmation Bias]]  :: Cherry-picking  evidence that supports  your idea
    while ignoring contradicting evidence.
  - [[https://rationalwiki.org/wiki/False_dilemma][False  Dilemma]] ::  Presenting  two  opposing options  as  the only  two
    options while hiding alternatives.
  - Lie :: An outright untruth repeated knowingly as a fact.
  - Misleading Vividness :: Describing an  occurrence in vivid detail, even
    if it is a rare occurrence, to convince someone that it is a problem.
  - [[https://rationalwiki.org/wiki/Red_herring][Red  Herring]] ::  Introducing  irrelevant material  to  the argument  to
    distract and lead towards a different conclusion.
  - [[https://rationalwiki.org/wiki/Slippery_slope][Slippery  Slope]]  ::  Assuming  a   relatively  small  first  step  will
    inevitably lead to a chain of related (negative) events.
  - Suppressed  Evidence ::  Intentionally failing  to use  significant and
    relevant information which counts against one’s own conclusion.
  - [[https://www.logicallyfallacious.com/logicalfallacies/Unfalsifiability][Unfalsifiability]]  :: Offering  a  claim that  cannot  be proven  false,
    because there is no way to check if it is false or not.

- *Garbled cause and effect*

  - [[https://rationalwiki.org/wiki/Affirming_the_consequent][Affirming the Consequent]]  :: Assuming there's only  one explanation for
    the observation you're making.
  - [[https://rationalwiki.org/wiki/Circular_reasoning][Circular Logic]] ::  A conclusion is derived from a  premise based on the
    conclusion.
  - [[https://rationalwiki.org/wiki/Causality][Cum Hoc  Ergo Propter Hoc]]  :: Claiming  two events that  occur together
    must have a cause-and-effect relationship. (Correlation = cause).
  - Denying  the Antecedent  :: There  isn't  only one  explanation for  an
    outcome. So it's false to assume the cause based on the effect.
  - Ignoring a  Common Cause  :: Claiming  one event  must have  caused the
    other when a third (unlooked for) event is probably the cause.
  - Post Hoc Ergo  Propter Hoc :: Claiming that because  one event followed
    another, it was also caused by it.
  - Two Wrongs  Make a Right  :: Assuming that  if one wrong  is committed,
    another wrong will cancel it out.
  - [[https://rationalwiki.org/wiki/Sunk_cost][Sunk cost]] ::  Someone argues for  continuing a course of action despite
    evidence showing it’s a mistake.

- *On the attack*

  - [[https://rationalwiki.org/wiki/Argumentum_ad_hominem][Ad Hominem]]  :: (Latin for  'to the  person') Bypassing the  argument by
    launching an irrelevant attack on the person and not their claim.
  - [[https://rationalwiki.org/wiki/Burden_of_proof][Burden of Proof]] ::  I don't need to prove my claim -  you must prove it
    is false.
  - Circumstance  Ad Hominem  ::  Stating a  claim  lacks credibility  only
    because of the advocate’s interests in their claim.
  - [[https://rationalwiki.org/wiki/Genetic_fallacy][Genetic Fallacy]]  :: Attacking the  cause or  origin of a  claim, rather
    than its substance.
  - [[https://rationalwiki.org/wiki/Association_fallacy#Negative_uses][Guilt by Association]] :: Discrediting an idea or claim by associating it
    with an undesirable person or group.
  - [[https://rationalwiki.org/wiki/Straw_man][Straw  Man]] ::  Creating a  distorted or  simplified caricature  of your
    opponent's argument, and then arguing against that.

* Input

- English
  - Punctuation
  - Single with plural
    - After and/or
      After list of items joined by "and" or "or" plural version of the verb is used.

      "Both A and B are"

      #recheck
  - Links
    - https://english.lingolia.com/en/grammar
    - https://advice.writing.utoronto.ca/english-language/definite-article/
    - https://chat.library.berkeleycollege.edu/faq/268679
  - Writing
    - People expression description
    - Describing movements/actions
    - Interrupting each other in dialogue
    - Body language in dialogue
      - "", said <N>, then added, after <V>, ""
    - Describing emotions in dialogue
    - Referring to one of the two people
      Repeatedly writing he/she/name/occupation through the span of the dialogue might become too boring at some point. Need to get more examples of how I can refer to one of the people who are talking at the moment.
    - Balancing action description
      - Adding narration to the text
  - Words and phrases
  - Sentences to disassemble
    - It had been suggested that perhaps mere could be a few less dark otters
  - Articles
    - "The"
      - "in both the"
        Depending on the emphasis I want to put in the sentence, I can use either "in both the" and "in the both". Apparently, usage of "the" in this situation is fully correct.
    - "A/An"
    - Situations where I should omit the article
